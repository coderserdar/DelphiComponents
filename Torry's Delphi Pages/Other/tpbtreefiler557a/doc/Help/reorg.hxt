;
;-------------------------------------------------------------------
!TOPIC 728 Reorg
Reorganizing a Fileblock is a process similar to rebuilding, but one that
is used in different circumstances. Reorganization is used when the size of
each data record or its format must be changed. The Reorg unit also
provides a way to import foreign data into the Fileblock format.

The Reorg unit uses the Restruct and ReIndex units to do its work.

  0729ReorgFileBlock  0730RESTRUCT/REINDEX
;
;-------------------------------------------------------------------
!TOPIC 729 ReorgFileBlock
!NOINDEX
procedure 0728Reorg.ReorgFileBlock(FBlName : IsamFileBlockName;
                               DatSLen : LongInt;
                               NumberOfKeys : Integer;
                               IID : IsamIndDescr;
                               DatSLenOld : LongInt;
                               BuildKeyFunc : FuncBuildKey;
                               ChangeDatSProc : FuncChangeDatS);

This procedure builds the Fileblock of name FBlName with a possibly
different new data record length, and possibly different keys. For this
operation to succeed, every undeleted record must begin with a longint of
value 0. A backup copy of the ".DAT" file of the fileblock to be rebuilt
should be made before using ReorgFileBlock, just in case something goes
wrong during the reorganization. The following steps are taken by the
procedure:

!NOWRAP
  1) Rename the ".DAT" file to ".SAV" if no ".SAV" file exists.
  2) Call BTCreateFileBlock with the name FBlName, data record length
     DatSLen, NumberOfKeys of keys, and the index descriptor IID,
     then opens the fileblock with BTOpenFileBlock.
  3) Read every data record from the ".SAV" file.
  4) Rebuild the data record into the new format and BTAddRec to the new
     fileblock.
  5) For every single key (1 to NumberOfKeys), read every data record
     from the new ".DAT" file and enter the key with BTAddKey.
  6) Close the new fileblock.
  7) Delete the ".SAV" file.
!WRAP

The user must write a procedure that will build a new data record from the
contents of the old one in order to carry out step 4. The address of the
new routine must be passed in ProcChangeDatS. This procedure must be
compiled under the FAR model, and it may not be nested within any other
procedure or function. It should be of the following form:

  {$F+}
  function ChangeDatSFunc(var DatSOld; var DatSNew; var Len : Word) :Boolean;

This procedure builds a new data record DatSNew from the old DatSOld.

The user must also write a function that builds the desired key from the
data record in order to carry out step 5. This function's address must be
passed in FuncBuildKey. This procedure should be of the following form:

  {$F+}
  function BuildKeyFunc(var DatS; KeyNr :Word) : IsamKeyStr;

This function returns the key of number KeyNr from the data record
DatS.

The reorg operation procedure is terminated immediately in case of a fatal
I/O error. The remaining ".SAV" file may not be deleted, since it will be
needed for another construction attempt. The data record with all the keys
that have been entered is deleted from the fileblock if a duplicate key is
detected during the rebuild. The contents of the data record, along with
its corresponding keys, are written to a file with a ".MSG" extension.
This may later be examined with TYPE or a program like LIST. No file
with a ".MSG" extension exists after the rebuild if there were no
duplicate keys found during the reconstruction.

The Filer unit interfaces a pointer variable called IsamReXUserProcPtr.
If this pointer is not nil, Reorg will call this procedure after each record
is written and after each key is added. It can be used to implement a status
routine or to check for user break. The procedure must be declared as follows:

  {$F+}
  procedure UserStatusProc(KeyNr : Integer;
                           NumRecsRead,
                           NumRecsWritten : LongInt;
                           var Data;
                           Len : Word);

It is possible to abort a reorganization in progress. If the
IsamReXUserProcPtr routine sets IsamOK to False, the ReorgFileBlock call
will immediately abort, setting IsamError to 10460. No attempt is made to
undo changes made to the data file when a reorganization is aborted; this is
the programmer's responsibility. If you intend to allow reorganizations to be
aborted, then you must make a backup copy of the original data file.
