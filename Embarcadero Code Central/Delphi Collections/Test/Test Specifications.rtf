{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times{\*\falt Times New Roman};}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica{\*\falt Arial};}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier{\*\falt Courier New};}
{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn{\*\falt Times New Roman};}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv{\*\falt Arial};}
{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York{\*\falt Times New Roman};}
{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f16\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Monotype Sorts;}{\f17\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f18\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 10 Pitch;}
{\f19\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 20 Pitch;}{\f20\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 5 Pitch;}{\f21\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 12 Pitch;}
{\f22\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 24 Pitch;}{\f23\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 6 Pitch;}{\f24\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 16.67 Pitch;}
{\f25\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times{\*\falt Times New Roman};}{\f26\fswiss\fcharset0\fprq2{\*\panose 020b0603020202030204}Univers;}{\f27\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}
{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f29\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f30\fswiss\fcharset0\fprq2{\*\panose 020b0602030504090204}Lucida Sans;}
{\f31\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f32\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f33\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f34\fmodern\fcharset0\fprq1{\*\panose 02010509020102010303}OCR A Extended;}{\f35\froman\fcharset0\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f36\fswiss\fcharset0\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}
{\f37\fswiss\fcharset0\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f38\fswiss\fcharset0\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f39\fdecor\fcharset0\fprq2{\*\panose 04040403030d02020704}Matisse ITC;}
{\f40\fdecor\fcharset0\fprq2{\*\panose 04020404030d07020202}Tempus Sans ITC;}{\f41\fdecor\fcharset0\fprq2{\*\panose 04040506030f02020702}Westminster;}{\f42\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f43\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f44\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Int A;}{\f45\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Int B;}
{\f46\fmodern\fcharset2\fprq1{\*\panose 02070509030505020404}LotusWP Box;}{\f47\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Type;}{\f48\froman\fcharset0\fprq2{\*\panose 02020603060505020304}LotusWP Icon;}
{\f49\froman\fcharset2\fprq2{\*\panose 05020602060204020302}Math A;}{\f50\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Math B;}{\f51\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Math C;}
{\f52\fnil\fcharset0\fprq2{\*\panose 01010100010101010101}Lotus Postal Barcode;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020b0506020102020204}Arial Narrow;}{\f54\froman\fcharset0\fprq2{\*\panose 02020502060306020303}Baskerville;}
{\f55\fnil\fcharset0\fprq2{\*\panose 02010608020103020204}Binner Gothic;}{\f56\froman\fcharset0\fprq2{\*\panose 02020502060201020303}Centaur;}{\f57\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}
{\f58\fswiss\fcharset0\fprq2{\*\panose 020b0502020104020203}Gill Sans;}{\f59\fnil\fcharset0\fprq2{\*\panose 02010606040404020203}Gill Sans Condensed;}{\f60\fswiss\fcharset0\fprq2{\*\panose 020b0a02020104020203}Gill Sans Ultra Bold;}
{\f61\fmodern\fcharset0\fprq1{\*\panose 020b0509020102020204}Letter Gothic;}{\f62\fswiss\fcharset0\fprq2{\*\panose 020b0503020103020203}News Gothic;}{\f63\froman\fcharset0\fprq2{\*\panose 02040503050401020204}Nimrod;}
{\f64\froman\fcharset0\fprq2{\*\panose 02070706080601050204}Onyx;}{\f65\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Botanical;}{\f66\froman\fcharset0\fprq2{\*\panose 02060803030405020103}Rockwell;}
{\f67\froman\fcharset0\fprq2{\*\panose 02060902020105020403}Rockwell Condensed;}{\f68\froman\fcharset0\fprq2{\*\panose 02040304020103020203}Rockwell Light;}{\f69\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Brush Script;}
{\f70\froman\fcharset0\fprq2{\*\panose 02020502060401020303}Perpetua;}{\f71\fswiss\fcharset0\fprq2{\*\panose 020b0602060201020203}Lydian;}{\f72\fswiss\fcharset0\fprq2{\*\panose 020b0506020103020203}News Gothic Condensed;}
{\f73\froman\fcharset0\fprq2{\*\panose 02040a03060301020203}Photina Casual Black;}{\f74\fswiss\fcharset0\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}
{\f75\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT;}{\f76\fswiss\fcharset0\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f77\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana Ref;}
{\f78\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}MagicSymbols;}{\f79\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Gamekeys MT;}{\f80\fnil\fcharset2\fprq2{\*\panose 05010101010101010101}Microsoft Logo 95;}
{\f81\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}SWlogo;}{\f82\fswiss\fcharset0\fprq2{\*\panose 020b0606020202060204}Univers Condensed;}{\f83\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol;}
{\f84\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f85\fswiss\fcharset0\fprq2{\*\panose 020b0706050402050204}Impact;}{\f86\fswiss\fcharset0\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}
{\f87\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f88\fnil\fcharset0\fprq2{\*\panose 00010606040000040003}Agency FB;}{\f89\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David;}
{\f90\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David Transparent;}{\f91\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam;}{\f92\fmodern\fcharset177\fprq1{\*\panose 00000009000000000000}Miriam Fixed;}
{\f93\fmodern\fcharset177\fprq1{\*\panose 00000009000000000000}Fixed Miriam Transparent;}{\f94\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam Transparent;}{\f95\fmodern\fcharset177\fprq1{\*\panose 00000009000000000000}Rod;}
{\f96\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Reference 1;}{\f97\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MS Reference 2;}
{\f98\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT Tu{\*\falt Times New Roman};}{\f99\froman\fcharset238\fprq2 Times New Roman CE;}{\f100\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f102\froman\fcharset161\fprq2 Times New Roman Greek;}{\f103\froman\fcharset162\fprq2 Times New Roman Tur;}{\f104\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f105\fswiss\fcharset238\fprq2 Arial CE;}{\f106\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f108\fswiss\fcharset161\fprq2 Arial Greek;}{\f109\fswiss\fcharset162\fprq2 Arial Tur;}{\f110\fswiss\fcharset186\fprq2 Arial Baltic;}{\f111\fmodern\fcharset238\fprq1 Courier New CE;}{\f112\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f114\fmodern\fcharset161\fprq1 Courier New Greek;}{\f115\fmodern\fcharset162\fprq1 Courier New Tur;}{\f116\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f189\fswiss\fcharset238\fprq2 Tahoma CE;}{\f190\fswiss\fcharset204\fprq2 Tahoma Cyr;}
{\f192\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f193\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f194\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f201\fswiss\fcharset238\fprq2 Arial Black CE;}{\f202\fswiss\fcharset204\fprq2 Arial Black Cyr;}
{\f204\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f205\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f206\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f255\fswiss\fcharset238\fprq2 Univers CE;}{\f259\fswiss\fcharset162\fprq2 Univers Tur;}
{\f285\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f286\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}{\f288\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f289\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}
{\f291\froman\fcharset238\fprq2 Book Antiqua CE;}{\f292\froman\fcharset204\fprq2 Book Antiqua Cyr;}{\f294\froman\fcharset161\fprq2 Book Antiqua Greek;}{\f295\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f296\froman\fcharset186\fprq2 Book Antiqua Baltic;}
{\f297\fswiss\fcharset238\fprq2 Century Gothic CE;}{\f298\fswiss\fcharset204\fprq2 Century Gothic Cyr;}{\f300\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f301\fswiss\fcharset162\fprq2 Century Gothic Tur;}
{\f302\fswiss\fcharset186\fprq2 Century Gothic Baltic;}{\f351\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f352\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f354\fmodern\fcharset161\fprq1 Lucida Console Greek;}
{\f355\fmodern\fcharset162\fprq1 Lucida Console Tur;}{\f417\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f418\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f420\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f421\fswiss\fcharset162\fprq2 Arial Narrow Tur;}
{\f422\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f499\froman\fcharset162\fprq2 Rockwell Tur;}{\f505\froman\fcharset162\fprq2 Rockwell Condensed Tur;}{\f561\fswiss\fcharset238\fprq2 Verdana Ref CE;}{\f562\fswiss\fcharset204\fprq2 Verdana Ref Cyr;}
{\f564\fswiss\fcharset161\fprq2 Verdana Ref Greek;}{\f565\fswiss\fcharset162\fprq2 Verdana Ref Tur;}{\f566\fswiss\fcharset186\fprq2 Verdana Ref Baltic;}{\f591\fswiss\fcharset238\fprq2 Univers Condensed CE;}
{\f595\fswiss\fcharset162\fprq2 Univers Condensed Tur;}{\f603\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f604\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f606\fscript\fcharset161\fprq2 Comic Sans MS Greek;}
{\f607\fscript\fcharset162\fprq2 Comic Sans MS Tur;}{\f608\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f609\fswiss\fcharset238\fprq2 Impact CE;}{\f610\fswiss\fcharset204\fprq2 Impact Cyr;}{\f612\fswiss\fcharset161\fprq2 Impact Greek;}
{\f613\fswiss\fcharset162\fprq2 Impact Tur;}{\f614\fswiss\fcharset186\fprq2 Impact Baltic;}{\f615\fswiss\fcharset238\fprq2 Trebuchet MS CE;}{\f619\fswiss\fcharset162\fprq2 Trebuchet MS Tur;}{\f621\fswiss\fcharset238\fprq2 Verdana CE;}
{\f622\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f624\fswiss\fcharset161\fprq2 Verdana Greek;}{\f625\fswiss\fcharset162\fprq2 Verdana Tur;}{\f626\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;
\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;
\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\adjustright \fs20 \snext0 Normal;}{\s1\sb280\sa140\nowidctlpar\adjustright \f17\fs28 \sbasedon0 \snext1 heading 1;}{
\s2\sb120\sa120\nowidctlpar\adjustright \b\f1 \sbasedon0 \snext2 heading 2;}{\s3\sb120\sa120\nowidctlpar\adjustright \b \sbasedon0 \snext3 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qc\sa960\nowidctlpar\adjustright \f17\fs48 
\sbasedon0 \snext15 Title;}{\s16\fi-360\li360\nowidctlpar{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pnucrm\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2047\ilvl11\adjustright \sbasedon0 \snext16 Outline Numbering;}{\s17\fi720\nowidctlpar\adjustright 
\sbasedon0 \snext17 First Line Indent;}{\s18\fi-360\li360\nowidctlpar{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2047\ilvl11\adjustright \sbasedon0 \snext18 Number List;}{
\s19\fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl10\ls2047\pnrnot0\pnf16\pnfs24\pnindent360\pnhang{\pntxtb v}}\ls2047\ilvl10\adjustright \sbasedon0 \snext19 Bullet 2;}{\s20\fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl10\ls2047\pnrnot0
\pnf14\pnfs24\pnindent360\pnhang{\pntxtb \'9f}}\ls2047\ilvl10\adjustright \sbasedon0 \snext20 Bullet 1;}{\s21\nowidctlpar\adjustright \sbasedon0 \snext21 Body Single;}{\s22\nowidctlpar\adjustright \sbasedon0 \snext22 Default Text;}}{\*\listtable
{\list\listtemplateid134807553\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid477385521}
{\list\listtemplateid134807553\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1195776475}}
{\*\listoverridetable{\listoverride\listid477385521\listoverridecount0\ls1}{\listoverride\listid1195776475\listoverridecount0\ls2}}{\*\revtbl {Unknown;}}{\info{\author SmartMaster}{\operator Matthew Greet}{\creatim\yr2003\mo3\dy11\hr16\min36}
{\revtim\yr2003\mo4\dy5\hr18\min55}{\printim\yr2003\mo3\dy11\hr16\min36}{\version263}{\edmins391}{\nofpages27}{\nofwords10899}{\nofchars62127}{\*\company  }{\*\category Miscellaneous}{\nofcharsws76296}{\vern71}}
\paperw11911\paperh16832\margl1440\margr1440 \widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\headery648\footery648\colsx709\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta ?}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta ?}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta ?}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta ?}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb ?}{\pntxta ?}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb ?}{\pntxta ?}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb ?}{\pntxta ?}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb ?}{\pntxta ?}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb ?}{\pntxta ?}}\pard\plain \s1\qc\sb280\sa140\nowidctlpar\widctlpar\outlinelevel0\adjustright \f17\fs28 {Delphi Collections
\par Test Specifications
\par }\pard\plain \s22\nowidctlpar\widctlpar\adjustright {
\par }\pard\plain \s2\sb120\sa120\nowidctlpar\outlinelevel1\adjustright \b\f1 {Functional Test Descriptions
\par }\trowd \trgaph108\trkeep\trhdr \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\b\fs20 Test name
}{\cell }{\b\fs20 Function/ property tested}{\cell }{\b\fs20 Used for}{\cell }{\b\fs20 Description}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_Def}{\cell }{\fs20 Create}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs24 \row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_Arr}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Non-map implementations that don\rquote t require natural items.}{\cell }{\fs20 Creates non-natural collection from array.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrEqu}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{\i\fs20 IEquatable}{\fs20  items.}{\cell }{
\fs20 Fails to create collection from array of non-natural items; creates natural collection from array of }{\i\fs20 IEquatable}{\fs20  items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrComp}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{\i\fs20 IComparable}{\fs20  items.}{\cell }{\fs20 
Fails to create collection from array of non-natural items; creates natural collection from array of }{\i\fs20 I}{\fs20 Comparable items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrHash}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{\i\fs20 IHashable}{\fs20  items.}{\cell }{\fs20 Fails to create collectio
n from array of non-natural items; creates natural collection from array of }{\i\fs20 IHashable}{\fs20  items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Create_ArrMap}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{\i\fs20 IMappable}{\fs20  items.}{\cell }{\fs20 Fails to create collection from array of non-natural items; creates natural collection from array of }{\i\fs20 
IMappable}{\fs20  items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrIntMap}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{
\i\fs20 IIntegerMappable}{\fs20  items.}{\cell }{\fs20 Fails to create collection from array of non-natural items; creates natural collection from array of }{\i\fs20 IIntegerMappable}{\fs20  items.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrStrMap}{\cell }{\fs20 Create(Array)}{\cell }{\fs20 Implementations that require }{\i\fs20 IStringMappable}{\fs20  items.}{
\cell }{\fs20 Fails to create collection from array of non-natural items; creates natural collection from array of }{\i\fs20 IStringMappable}{\fs20  items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IF}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that don\rquote t require natural items.}{\cell }{\fs20 Creates non-natural collection from non-natural collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IFEqu}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IEquatable}{\fs20 
 items.}{\cell }{\fs20 Fails to create collection from non-natural collection; creates natural collection from natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IFComp}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IComparable}{\fs20  items.}{\cell }{\fs20 
Fails to create collection from non-natural collection; creates natural collection from natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Create_IFEqu}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IHashable}{\fs20  items.}{\cell }{\fs20 Fails to create collection from non-natural collection; creates natural collection from natural collection.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IFMap}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IMappable}{
\fs20  items.}{\cell }{\fs20 Fails to create collection from non-natural collection; creates natural collection from natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IFIntMap}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IIntegerMappable}{\fs20  items.}{\cell }{\fs20 
Fails to create collection from non-natural collection; creates natural collection from natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Create_IFStrMap}{\cell }{\fs20 Create(ICollection)}{\cell }{\fs20 Implementations that require }{\i\fs20 IStringMappable}{\fs20  items.}{\cell }{\fs20 
Fails to create collection from non-natural collection; creates natural collection from natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Create_IMap}{\cell }{\fs20 Create(IMap)}{\cell }{\fs20 Map implementations that don\rquote t require natural keys.}{\cell }{\fs20 Creates non-natural key collection from non-natural key collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_IMapNat}{\cell }{\fs20 Create(IMap)}{\cell }{\fs20 Map implementations that require natural keys\cell 
Fails to create collection from non-natural key map; creates natural-keycollection from natural-key map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Create_IIntMap}{\cell }{\fs20 Create(IIntegerMap)}{\cell }{\fs20 Integer maps\cell Creates integer map from integer map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Create_IStrMap}{\cell }{\fs20 Create(IStringMap)}{\cell }{\fs20 String maps\cell Creates string map from string map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Create_ArrArr\cell Create(KeyArray, ItemArray)\cell Map implementations that don\rquote t require natural keys.\cell 
Creates non-natural key, non-natural item collection from non-natural key array and non-natural item array; creates natural key, non-natural item collection from natural key array and non-natural item array.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrArrNat\cell Create(KeyArray, ItemArray)\cell Map implementations that require natural keys\cell 
Fails to creates non-natural key, non-natural item collection from non-natural key array and non-natural item array; Creates natural key, non-natural item collection from natural key array and non-natural item array.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrArrInt\cell Create(KeyArray, ItemArray)\cell Integer maps\cell 
Creates non-natural item integer map from integer array and non-natural item array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Create_ArrArrStr\cell 
Create(KeyArray, ItemArray)\cell String maps\cell Creates non-natural item string map from string array and non-natural item array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_Fix}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Fixed size collections}{\cell }{\fs20 Returns false and size is not changed.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_Bag}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Non-fixed size bags}{\cell }{\fs20 Returns true twice and size is two after adding same item twice to empty bag.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_Set}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Non-fixed size sets}{\cell }{\fs20 
Returns true then false and size is one after adding same item twice to empty set (with ignore errors set).}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_List}
{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Non-fixed size lists}{\cell }{\fs20 Returns true, size is increased by one and item is appended to en
d for non-empty, unsorted list; returns true, size is increased by one and item is inserted in sort position for non-empty, sorted list.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_Map}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 Fails if item is non-natural; returns true then false  and size is one after add
ing same item twice to empty map (with ignore errors set).}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IntMap}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 
Non-fixed size integer maps}{\cell }{\fs20 Fails if item is non-natural; returns true then false  and size is one after adding same item twice to empty map (with ignore errors set).}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_StrMap}{\cell }{\fs20 Add(Item)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Fails if item is non-natural; returns true then false  and size is one after adding same item twice to empty map (with ignore errors set).}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_Arr}{\cell }{\fs20 Add(Array)}{\cell }{\fs20 Non-fixed size bag, set and list implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns number of items in array and collection contains items in array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_ArrEqu\cell Add(Array)\cell 
Non-fixed size, natural collections that use }{\i\fs20 IEquatable}{\fs20 \cell Returns number of items in array and collection contains items in array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_ArrComp\cell Add(Array)\cell Non-fixed size, natural collections that use }{\i\fs20 IComparable}{\fs20 \cell Returns number of items in array and collection contains items in array.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_ArrHash\cell Add(Array)\cell Non-fixed size, natural collections that use }{\i\fs20 IHashable}{\fs20 \cell 
Returns number of items in array and collection contains items in array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_ArrMap\cell Add(Array)\cell 
Non-fixed size, natural maps\cell Returns number of items in array and collection contains items in array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Add_ArrIntMap\cell Add(Array)\cell Non-fixed size, natural integer maps\cell Returns number of items in array and collection contains items in array.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_ArrStrMap\cell Add(Array)\cell Non-fixed size, natural string maps\cell Returns number of items in array and collection contains items in array.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IF}{\cell }{\fs20 Add(ICollection)}{\cell }{\fs20 Non-fixed size collections that don\rquote t require natural items}{\cell }{\fs20 
Returns number of items in array and contains items that match items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFEqu\cell 
Add(ICollection)\cell Non-fixed size, natural collections that use }{\i\fs20 IEquatable}{\fs20 \cell Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFComp\cell Add(ICollection)\cell Non-fixed size, natural collections that use }{\i\fs20 Icomparable}{\fs20 \cell 
Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFHash\cell 
Add(ICollection)\cell Non-fixed size, natural collections that use }{\i\fs20 IHashable}{\fs20 \cell Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 
{\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFMap\cell Add(Icollection)\cell Non-fixed size, natural maps\cell Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFIntMap\cell Add(Icollection)\cell Non-fixed size, natural integer maps\cell 
Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Add_IFStrMap\cell 
Add(Icollection)\cell Non-fixed size, natural string maps\cell Returns number of items in array and contains items that match items added to collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clear_NonFix}{\cell }{\fs20 Clear}{\cell }{\fs20 Non-fixed size non-maps}{\cell }{\fs20 Returns 2 for size 2 collection.  New size is 0.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clear_NonFixMap\cell Clear\cell Non-fixed size maps\cell Returns 2 for size 2 collection.  New size is 0.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clear_NonFixIntMap\cell Clear\cell Non-fixed size integer maps\cell Returns 2 for size 2 collection.  New size is 0.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clear_NonFixStrMap\cell Clear\cell Non-fixed size string maps\cell Returns 2 for size 2 collection.  New size is 0.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clear_Fix}{\cell }{\fs20 Clear}{\cell }{\fs20 Fixed size collections}{\cell }{\fs20 Returns 0 for size 2 collection.  New size is 2.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clone}{\cell }{\fs20 Clone}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size non-maps\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clone_Map\cell Clone\cell Non-fixed size maps\cell Returns i
tems that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clone_IntMap\cell Clone\cell Non-fixed size integer maps\cell Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Clone_StrMap\cell Clone\cell Non-fixed size string maps\cell 
Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsBag\cell CloneAsBag\cell Bags\cell Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsSet\cell CloneAsSet\cell Sets\cell Returns items that match items added to original collection by type an
d number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsList\cell CloneAsList\cell Lists\cell 
Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsMap\cell CloneAsMap\cell Maps\cell Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsIntegerMap\cell CloneAsIntegerMap\cell Integer maps\cell Returns items that match items added to original collect
ion by type and number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CloneAsStringMap\cell 
CloneAsStringMap\cell String maps\cell Returns items that match items added to original collection by type and number; items added to clone do not appear in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NonNat}{\cell }{\fs20 Contains(Item)}{\cell }{\fs20 Non-map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns false for item not in collection; returns true for item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NonNatMap}{\cell }{\fs20 
Contains(Item)}{\cell }{\fs20 Map implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns false for item not in collection; returns true for item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NonNatIntMap}{\cell }{\fs20 Contains(Item)}{\cell }{\fs20 Integer map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns false for item not in collection; returns true for item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NonNatStrMap}{\cell }{\fs20 
Contains(Item)}{\cell }{\fs20 String map implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns false for item not in collection; returns true for item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_Nat}{\cell }{\fs20 Contains(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns false for item not equal to any item in collection; returns true for item equal but not the same as one in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NatMap\cell Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns false for item not equal to any item in collection; returns true for item equal but not the same as one in collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NatIntMap\cell Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns false for item not equal to any item in collection; returns true for item equal but not the same as one in collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_NatStrMap\cell Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns fa
lse for item not equal to any item in collection; returns true for item equal but not the same as one in collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Contains_Arr}{\cell }{\fs20 Contains(Array)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for zero-length array; returns false for array containing no items found in
 original collection; returns false for array where some (but not all) items are found in original collection; returns true for array containing only items found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_ArrMap\cell Contains(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for zero-length arr
ay; returns false for array containing no items found in original collection; returns false for array where some (but not all) items are found in original collection; returns true for array containing only items found in original collection.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_ArrIntMap\cell Contains(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for zero-length array; returns false for array containing no items found in original collection; returns false for array where some (but not all) items are found in original collection; returns true for array
 containing only items found in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_ArrStrMap\cell Contains(Array)\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for zero-length array; returns false for array containing no items found in original collection; returns false for array where some (but not a
ll) items are found in original collection; returns true for array containing only items found in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Contains_IF}{\cell }{\fs20 Contains(ICollection)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for zero-length collection; returns false for collection containing 
no items found in original collection; returns false for collection where some (but not all) items are found in original collection; returns true for collection containing only items found in original collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_IFMap\cell Contains(ICollection)\cell Maps\cell 
Returns true for zero-length collection; returns false for collection containing no items found in original collection; returns false for collection where some (but not all) items are found in original collection; returns true for collection containing on
ly items found in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_IFIntMap\cell Contains(Icollection)\cell Integer maps\cell 
Returns true for zero-length collection; returns false for collection containing no items found in original collection; returns false for collection where some (but
 not all) items are found in original collection; returns true for collection containing only items found in original collection.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Contains_IFStrMap\cell Contains(Icollection)\cell String maps\cell Returns true for zero-length collection; returns false for collection con
taining no items found in original collection; returns false for collection where some (but not all) items are found in original collection; returns true for collection containing only items found in original collection.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_Bag\cell Equals\cell Bags\cell Returns fal
se for parameter of type set with same items; returns true for empty receiving bag/ empty parameter bag; returns false for empty receiving bag/ non-empty parameter bag; returns false for non-empty receiving bag/ empty parameter bag; returns false for non-
empty receiving bag/ non-empty parameter bag with no common items; returns false for non-empty receiving bag/ non-empty parameter bag with some (not all) common items; returns true for non-empty receiving bag/ non.-empty parameter with same items.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_Set\cell Equals\cell Sets\cell Returns false for parameter of type bag
 with same items; returns true for empty receiving set/ empty parameter set; returns false for empty receiving set/ non-empty parameter set; returns false for non-empty receiving set/ empty parameter se
t; returns false for non-empty receiving set/ non-empty parameter set with no common items; returns false for non-empty receiving set/ non-empty parameter set with some (not all) common items; returns true for non-empty receiving set/ non.-empty parameter
 with same items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_List\cell Equals\cell Lists\cell 
Returns false for parameter of type set with same items; returns true for empty receiving list/ empty parameter list; returns false for empty receiving list/ non-empty parameter list; returns false for non-empty r
eceiving list/ empty parameter list; returns false for non-empty receiving list/ non-empty parameter list with no common items; returns false for non-empty receiving list/ non-empty parameter list with some (not all) common items; returns true for non-emp
ty receiving list/ non.-empty parameter with same items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_Map\cell Equals\cell Maps\cell 
Returns false for parameter of type set with same items; returns true for empty receiving map/ empty parameter map; returns false for empty receiving map/ non-empty parameter m
ap; returns false for non-empty receiving map/ empty parameter map; returns false for non-empty receiving map/ non-empty parameter map with no common items; returns false for non-empty receiving map/ non-empty parameter map with some (not all) common item
s; returns true for non-empty receiving map/ non.-empty parameter with same items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_IntMap\cell Equals\cell 
Integer maps\cell Returns false for parameter of type set with same items; returns true for empty receiving integer map/ empty parameter integer map; returns
 false for empty receiving integer map/ non-empty parameter integer map; returns false for non-empty receiving integer map/ empty parameter integer map; returns false for non-empty receiving integer map/ non-empty parameter integer map with no common item
s; returns false for non-empty receiving integer map/ non-empty parameter integer map with some (not all) common items; returns true for non-empty receiving integer map/ non.-empty parameter with same items.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Equals_StrMap\cell Equals\cell String maps\cell Returns false f
or parameter of type set with same items; returns true for empty receiving integer map/ empty parameter integer map; returns false for empty receiving integer map/ non-empty parameter integer map; returns false for non-empty receiving integer map/ empty p
a
rameter integer map; returns false for non-empty receiving integer map/ non-empty parameter integer map with no common items; returns false for non-empty receiving integer map/ non-empty parameter integer map with some (not all) common items; returns true
 for non-empty receiving integer map/ non.-empty parameter with same items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNonNat}{\cell }{\fs20 
Find(Filter)}{\cell }{\fs20 Bags, sets and lists implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item mat
ches search object using custom comparator; returns item for collection where an item matches search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNonNatMap}{\cell }{\fs20 Find(Filter)}{\cell }{\fs20 Map implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns nil for empty collection; 
returns nil for collection where no item matches search object using custom comparator; returns item for collection where an item matches search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNonNatIntMap}{\cell }{\fs20 Find(Filter)}{\cell }{\fs20 Integer map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns nil for empty collection; returns nil for collection where no item matches search object using custom comparator; returns item for collection where an item matches search object using custom comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNonNatStrMap}{\cell }{\fs20 Find(Filter)}{\cell }{\fs20 String map implementations that don\rquote t require natural items.}{
\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using custom comparator; returns item for collection where an item matches search object using custom comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNat}{\cell }{\fs20 Find(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using no comparator; returns item for collection where an item matches search o
bject using no comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FilterNatMap}{\cell }{\fs20 Find(Filter)}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns nil for empty collection; returns nil for collection where no item matches search object using no comparator; returns item for collection where an item matches search object using no comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_ FilterNatIntMap}{\cell }{\fs20 Find(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns nil for empty collection; returns nil for collection where no item matches search object using no comparator; returns item for collection where an item matches search object using no comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_ FilterNatStrMap}{\cell }{\fs20 Find(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns nil for empty collection; returns nil for collection where no item matches search object using no comparator; returns item for collection where an item matches search object using no comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FuncNonNat}{\cell }{\fs20 Find(FilterFunc)}{\cell }{\fs20 Bags, sets and lists implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using filter function; returns item for collection where an item matches search object using filter function.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FuncNonNatMap}{\cell }{\fs20 Find(FilterFunc)}{\cell }{\fs20 Map implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using filter function; returns item for collection where an item matches search object using filter function.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FuncNonNatIntMap}{\cell }{\fs20 Find(FilterFunc)}{\cell }{\fs20 Integer map implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using filter function; returns item for collection where an item matches search object using filter function.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Find_FuncNonNatStrMap}{\cell }{\fs20 Find(FilterFunc)}{\cell }{\fs20 String map implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Returns nil for empty collection; returns nil for collection where no item matches search object using filter function; returns item for collection where an item matches search object using filter function.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNonNat}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Bag, set and list implementations that don\rquote t require natural items.}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection where no item matches search object using custom comparator; returns all matching items for collection w
here several items match search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNonNatMap}{\cell }{\fs20 
FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Map implementations that don\rquote t require natural items.}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection 
where no item matches search object using custom comparator; returns all matching items for collection where several items match search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNonNatIntMap}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer map implementations that don\rquote t require natural items.}{\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection where no item matches search object using custom comparator; returns all matching items for collection where several items match search objec
t using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNonNatStrMap}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {String implementations that don\rquote t require natural items.}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection where no item matches search ob
ject using custom comparator; returns all matching items for collection where several items match search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNat}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns empty collection for receiving empty collection; return
s empty collection for collection where no item matches search object using custom comparator; returns all matching items for collection where several items match search object using custom comparator.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNatMap}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns emp
ty collection for receiving empty collection; returns empty collection for collection where no item matches search object using custom comparator; returns all matching items for collection where several items match search object using custom comparator.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNatIntMap}{\cell }{\fs20 FindAll(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection where no item matches search object using custom comparator; returns all matching items for collection wher
e several items match search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 FindAll_FilterNatStrMap}{\cell }{\fs20 FindAll(Filter)}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for receiving empty collection; returns empty collection for collection where no item matches search object using cus
tom comparator; returns all matching items for collection where several items match search object using custom comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 GetAsArray}{\cell }{\fs20 GetAsArray}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns items that match items added to collection by type and number.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetAsArray_Map}{\cell }{\fs20 GetAsArray}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns items that match items added to collection by type and number.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetAsArray_IntMap}{\cell }{\fs20 GetAsArray}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns items that match items added to collection by type and number.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetAsArray_StrMap}{\cell }{\fs20 GetAsArray}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns items that match items added to collection by type and number.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetComparator_NonNat}{\cell }{\fs20 
GetComparator}{\cell }{\fs20 Non-natural collection}{\cell }{\fs20 Returns singleton }{\i\fs20 TDefaultComparator}{\fs20  instance for non-natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetComparator_Nat}{\cell }{\fs20 GetComparator}{\cell }{\fs20 Natural collection}{\cell }{\fs20 Returns singleton }{\i\fs20 TNaturalComparator}{\fs20  instance for natural collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetFixedSize_NonFix}{\cell }{\fs20 GetFixedSize}{\cell }{\fs20 Non-fixed size collections}{\cell }{\fs20 Returns false.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetFixedSize_Fix}{\cell }{\fs20 GetFixedSize}{\cell }{\fs20 Fixed size collections}{\cell }{\fs20 Returns true}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIgnoreErrors}{\cell }{\fs20 GetIgnoreErrors}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns [}{\i\fs20 ceDuplicate}{\fs20 ] by default.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 GetInstance}{\cell }{\fs20 GetInstance}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns receiving collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator}{\cell }{\fs20 GetIterator}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_Map}{\cell }{\fs20 GetIterator}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Iterator returns items that match items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_IntMap}{\cell }{\fs20 GetIterator}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match items added to collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_StrMap}{\cell }{\fs20 GetIterator}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_Rem}{\cell }{\fs20 GetIterator}{\cell }{\fs20 Bags, sets and lists implementations that allow removal}{\cell }{\fs20 Iterator removes items from collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_RemMap}{\cell }{\fs20 GetIterator}{\cell }{\fs20 Map implementations that allow removal}{\cell }{\fs20 
Iterator removes items from collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_RemIntMap}{\cell }{\fs20 GetIterator}{\cell }{\fs20 
Integer map implementations that allow removal}{\cell }{\fs20 Iterator removes items from collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
GetIterator_RemStrMap}{\cell }{\fs20 GetIterator}{\cell }{\fs20 String map implementations that allow removal}{\cell }{\fs20 Iterator removes items from collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_Filter}{\cell }{\fs20 GetIterator(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FilterMap}{
\cell }{\fs20 GetIterator(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FilterIntMap}{\cell }{\fs20 GetIterator(Filter)}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FilterStrMap}{\cell }{\fs20 GetIterator(Filter)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {String maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 
{\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_Func}{\cell }{\fs20 GetIterator(FilterFunc)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FuncMap}{
\cell }{\fs20 GetIterator(FilterFunc)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FuncIntMap}{\cell }{\fs20 GetIterator(FilterFunc)}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetIterator_FuncStrMap}{\cell }{\fs20 GetIterator(FilterFunc)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {String maps implementations that don\rquote t require natural items.\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator returns items that match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 
{\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemIID_Equ}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 Implementations that use }{\i\fs20 IEquatable}{\fs20  for natural collections.}{\cell }{\fs20 Returns IID of }{
\i\fs20 IEquatable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemIID_Comp}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 
Implementations that use }{\i\fs20 IComparable}{\fs20  for natural collections.}{\cell }{\fs20 Returns IID of }{\i\fs20 IComparable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemIID_Hash}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 Implementations that use }{\i\fs20 IHashable}{\fs20  for natural collections.}{\cell }{\fs20 Returns IID of }{\i\fs20 IHashable}{
\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemIID_Map}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 Implementations that use }{\i\fs20 
IMappable}{\fs20  for natural collections.}{\cell }{\fs20 Returns IID of }{\i\fs20 IMappable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
GetNaturalItemIID_IntMap}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 Implementations that use }{\i\fs20 IIntegerMappable}{\fs20  for natural collections.}{\cell }{\fs20 Returns IID of }{\i\fs20 IMappable}{\fs20 .}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemIID_StrMap}{\cell }{\fs20 GetNaturalItemIID}{\cell }{\fs20 Implementations that use }{\i\fs20 IStringMappable}{\fs20 
 for natural collections.}{\cell }{\fs20 Returns IID of }{\i\fs20 IMappable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemsOnly_Both}{\cell 
}{\fs20 GetNaturalItemsOnly}{\cell }{\fs20 Implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns false when natural items not set at construction; returns true when natural items set at construction.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalItemsOnly_Nat}{\cell }{\fs20 GetNaturalItemsOnly}{\cell }{\fs20 Implementations that require natural items.}{\cell }{\fs20 
Returns true when natural items not set at construction; returns true when natural items set at construction.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
GetSize_Fix}{\cell }{\fs20 GetSize}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns 2 for collection created from 2 items.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetSize_NonFix}{\cell }{\fs20 GetSize}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Non-fixed size bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns 2 when two items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetSize_NonFixMap}{\cell }{\fs20 GetSize}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns 2 when two items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsEmpty}{\cell }{\fs20 IsEmpty}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for empty collection; returns false for non-empty collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsEmpty_Map}{\cell }{\fs20 IsEmpty}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for empty collection; returns false for non-empty collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsEmpty_IntMap}{\cell }{\fs20 IsEmpty}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for empty collection; returns false for non-empty collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsEmpty_StrMap}{\cell }{\fs20 IsEmpty}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for empty collection; returns false for non-empty collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsNaturalItem}{\cell }{\fs20 IsNaturalItem}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for natural item; returns false non-natural item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsNaturalItem_Map}{\cell }{\fs20 IsNaturalItem}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns true for natural item; returns false non-natural item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsNaturalItem_IntMap}{\cell }{\fs20 IsNaturalItem}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for natural item; returns false non-natural item.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IsNaturalItem_StrMap}{\cell }{\fs20 IsNaturalItem}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns true for natural item; returns false non-natural item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemAllowed_NonNat}{\cell }{\fs20 ItemAllowed}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-natural collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns ceOK for non-natural item with non-natural collection; returns ceOK for natural item with non-natural collection;}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemAllowed_Nat}{\cell }{\fs20 ItemAllowed}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Natural bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright 
{\fs20 Returns ceNotNaturalItem for non-natural item with natural collection; returns ceOK for natural item with natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemAllowed_NatMap}{\cell }{\fs20 ItemAllowed}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Natural maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns ceNotNaturalItem for non-natural item with natural collection; returns ceOK for natural item with natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemAllowed_NatIntMap}{\cell }{\fs20 ItemAllowed}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Natural integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns ceNotNaturalItem for non-natural item with natural collection; returns ceOK for natural item with natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemAllowed_NatStrMap}{\cell }{\fs20 ItemAllowed}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Natural string maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns ceNotNaturalItem for non-natural item with natural collection; returns ceOK for natural item with natural collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NonNatBagList}{\cell }{\fs20 ItemCount(Item)}{\cell }{\fs20 Bag and list implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns zero for item not in collection; returns one for single item in collection; returns two for item duplicated in item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NonNatSet}{\cell }{\fs20 ItemCount(Item)}{\cell }{\fs20 Set implementations that don\rquote t require natural items.}{\cell }{\fs20 Ret
urns zero for item not in collection; returns one for item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NonNatMap}{\cell }{\fs20 
Contains(Item)}{\cell }{\fs20 Map implementations that don\rquote t require natural items.}{\cell }{\fs20 Returns zero for item not in collection; returns one for single item in collection; returns two for item duplicated in item.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NonNatIntMap}{\cell }{\fs20 Contains(Item)}{\cell }{\fs20 Integer map implementations that don\rquote t require natural items.}
{\cell }{\fs20 Returns zero for item not in collection; returns one for single item in collection; returns two for item duplicated in item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NonNatStrMap}{\cell }{\fs20 Contains(Item)}{\cell }{\fs20 String map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Returns zero for item not in collection; returns one for single item in collection; returns two for item duplicated in item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NatBagList}{\cell }{\fs20 Contains(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns zero for item not in collection; returns one for single item in collection; returns two for item duplicated in item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NatSet}{\cell }{\fs20 Contains(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Sets\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for item not in collection; returns one for single item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NatMap\cell 
Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns zero for item not in collection; returns one for single item in collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NatIntMap\cell Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns zero for item not in collection; returns one for single item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_NatStrMap\cell Contains(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for item not in collection; returns one for single item in collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_Arr}{\cell }{\fs20 
Contains(Array)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns zero for zero-length array; returns zero for array
 containing no items found in original collection; returns number of common items for array where some (but not all) items are found in original collection; returns size of array for array containing only items found in original collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_ArrMap\cell Contains(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for zero-length array; returns zero for array containing no items found in original collection; returns number of common items for array where some (but not all) items are found in original collection; returns size of a
rray for array containing only items found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_ArrIntMap\cell Contains(Array)\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for zero-length array; returns zero for array containing no items found in original collection; returns number of common items
 for array where some (but not all) items are found in original collection; returns size of array for array containing only items found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_ArrStrMap\cell Contains(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for zero-length array; returns zer
o for array containing no items found in original collection; returns number of common items for array where some (but not all) items are found in original collection; returns size of array for array containing only items found in original collection.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_IF}{\cell }{\fs20 Contains(ICollection)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Bags, sets and lists}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns zero for zero-length collection; returns zero for collection containing no items found in original collection; returns number of common items for collection where some (but not all) items are fou
nd in original collection; returns size of parameter for parameter containing only items found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 ItemCount_IFMap\cell Contains(ICollection)\cell Maps\cell Returns zero for zero-length collection; returns zero for collection containing no items foun
d in original collection; returns number of common items for collection where some (but not all) items are found in original collection; returns size of parameter for parameter containing only items found in original collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_IFIntMap\cell Contains(Icollection)\cell Integer maps\cell 
Returns zero for zero-length collection; returns zero for collection containing no items found in original collection; returns number of common items for collection where some (but not all) items are found in original collection
; returns size of parameter for parameter containing only items found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ItemCount_IFStrMap
\cell Contains(Icollection)\cell String maps\cell Returns zero for zero-length collection; returns zero for collection containing no items found in original c
ollection; returns number of common items for collection where some (but not all) items are found in original collection; returns size of parameter for parameter containing only items found in original collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNonNat}{\cell }{\fs20 Matching(Array)}{\cell }{\fs20 Bags, sets and lists implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Non-natural collection - returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; re
turns empty collection for non-empty receiving collection/ empty parameter array; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNonNatMap}{\cell }{\fs20 Matching(Array)}{\cell }{\fs20 Map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Non-natural collection - returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-emp
ty receiving collection/ empty parameter array; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNonNatIntMap}{\cell }{\fs20 Matching(Array)}{\cell }{\fs20 Integer map implementations that don\rquote t require natural items.}{\cell }{\fs20 
Non-natural collection - returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-empty receiving collection
/ empty parameter array; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNonNatStrMap}{\cell }{\fs20 Matching(Array)}{\cell }{\fs20 String map implementations that don\rquote t require natural items.}{\cell }{\fs20 Non-natural coll
ection - returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-empty receiving collection/ empty parameter array
; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Matching_ArrNat}{\cell }{\fs20 Matching(Array)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for empty receiving collection/ empty parameter array; returns e
mpty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-empty receiving collection/ empty parameter array; returns collection containing two matching items where two items in receiving collection match p
arameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNatMap}{\cell }{\fs20 Matching(Array)}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-emp
ty receiving collection/ empty parameter array; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNatIntMap}{\cell }{\fs20 Matching(Array)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Returns empty collection for empty receiving
 collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-empty receiving collection/ empty parameter array; returns collection containing two matching items wh
ere two items in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_ArrNatStrMap}{\cell }{\fs20 Matching(Array)}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empt
y parameter array; returns empty collection for non-empty receiving collection/ empty parameter array; returns collection containing two matching items where two items in receiving collection match parameter array.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNonNat}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 Bags, sets and lists implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Non-natural collection - returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty paramete
r collection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNonNatMap}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 Map implementations that don\rquote t require natural items.}{
\cell }{\fs20 Non-natural collection - returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty parameter collect
ion; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNonNatIntMap}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 Integer map implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Non-natural collection - returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty parameter colle
ction; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNonNatStrMap}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 String map implementations that don\rquote 
t require natural items.}{\cell }{\fs20 Non-natural collection - returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty parameter coll
ection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNat}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 Bags, sets and lists\cell 
Returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty parameter collection; returns empty collection for non-empty receiving collection/ empt
y parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNatMap}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 Maps\cell Returns empty collection for empty receiving collection/ empty parame
ter collection; returns empty collection for empty receiving collection/ non-empty parameter collection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two it
ems in receiving collection match parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNatIntMap}{\cell }{\fs20 Matching(ICollection)}{
\cell }{\fs20 Integer maps\cell Returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ no
n-empty parameter collection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Matching_IFNatStrMap}{\cell }{\fs20 Matching(ICollection)}{\cell }{\fs20 String maps\cell 
Returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection/ non-empty parameter collection; returns empty collection for non-empty receivi
ng collection/ empty parameter collection; returns collection containing two matching items where two items in receiving collection match parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_Fix}{\cell }{\fs20 Remove}{\cell }{\fs20 Fixed size collections}{\cell }{\fs20 Fails when ignore errors .not set.  Returns nil if ignore errors set.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_Dup}{\cell }{\fs20 Remove}{\cell }{\fs20 Bags and lists collections that allow duplicates}{\cell }{\fs20 
Returns item for collection that originally had 2, equal items.  Collection still contains item.  New size is 1.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Remove_NoDup}{\cell }{\fs20 Remove}{\cell }{\fs20 Set collections that don\rquote t allow duplicates}{\cell }{\fs20 Returns item for collection that originally contained it.  Collection does not contain item.   New size is 0.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_Map}{\cell }{\fs20 Remove}{\cell }{\fs20 Maps}{\cell }{\fs20 
Returns item for collection that originally had 2, equal items.  Collection still contains item.  New size is 1.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Re
move_IntMap}{\cell }{\fs20 Remove}{\cell }{\fs20 Integer maps}{\cell }{\fs20 Returns item for collection that originally had 2, equal items.  Collection still contains item.  New size is 1.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_StrMap}{\cell }{\fs20 Remove}{\cell }{\fs20 String maps}{\cell }{\fs20 Returns item for collection that originally had 2, equal items.  Collection s
till contains item.  New size is 1.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveAll_Dup}{\cell }{\fs20 Remove}{\cell }{\fs20 
Bags and lists collections that allow duplicates}{\cell }{\fs20 Returns collection of size 2 for collection that originally had 2, equal items.  Collection does not contain item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveAll_NoDup}{\cell }{\fs20 Remove}{\cell }{\fs20 Set collections that don\rquote t allow duplicates}{\cell }{\fs20 
Returns collection of size 1 for collection that originally had 1 item.  Collection does not contain item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveAll_Map}{\cell }{\fs20 Remove}{\cell }{\fs20 Maps}{\cell }{\fs20 Returns collection of size 2 for collection that originally had 2, equal items.  Collection does not contain item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveAll_IntMap}{\cell }{\fs20 Remove}{\cell }{\fs20 Integer maps}{\cell }{\fs20 
Returns collection of size 2 for collection that originally had 2, equal items.  Collection does not contain item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveAll_StrMap}{\cell }{\fs20 Remove}{\cell }{\fs20 String maps}{\cell }{\fs20 Returns collection of size 2 for collection that originally had 2, equal items.  Collection does not contain item.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_Arr}{\cell }{\fs20 RemoveAll(Array)}{\cell }{\fs20 Non-fixed size bags, sets and lists collections}{\cell }{\fs20 
Returns items in parameter array, which were in receiving collection.  Collection does not contain any items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_ArrMap}{\cell }{\fs20 RemoveAll(Array)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 
Returns items in parameter array, which were in receiving collection.  Collection does not contain any items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_ArrIntMap}{\cell }{\fs20 RemoveAll(Array)}{\cell }{\fs20 Non-fixed size integer maps}{\cell }{\fs20 
Returns items in parameter array, which were in receiving collection.  Collection does not contain any items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_ArrStrMap}{\cell }{\fs20 RemoveAll(Array)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 Returns items in parameter array, which were in rec
eiving collection.  Collection does not contain any items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_IF}{\cell }{\fs20 
RemoveAll(ICollection)}{\cell }{\fs20 Non-fixed size bags, sets and lists collections}{\cell }{\fs20 Returns items in parameter collection, which were in receiving collection.  Collection does not contain any items in parameter collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_IFMap}{\cell }{\fs20 RemoveAll(ICollection)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 
Returns items in parameter collection, which were in receiving collection.  Collection does not contain any items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_IFIntMap}{\cell }{\fs20 RemoveAll(ICollection)}{\cell }{\fs20 Non-fixed size integer maps}{\cell }{\fs20 
Returns items in parameter collection, which were in receiving collection.  Collection does not contain any items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Remove_IFStrMap}{\cell }{\fs20 RemoveAll(ICollection)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Returns items in parameter collection, which were in receiving collection.  Collection does not contain any items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_Arr}{\cell }{\fs20 RetainAll(Array)}{\cell }{\fs20 Non-fixed size bags, sets and lists}{\cell }{\fs20 Returns items removed from collection.  Collection only contains items in parameter array.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_ArrMap}{\cell }{\fs20 RetainAll(Array)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 
Returns items removed from collection.  Collection only contains items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_ArrIntMap}{\cell }{
\fs20 RetainAll(Array)}{\cell }{\fs20 Non-fixed size integer maps}{\cell }{\fs20 Returns items removed from collection.  Collection only contains items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_ArrStrMap}{\cell }{\fs20 RetainAll(Array)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Returns items removed from collection.  Collection only contains items in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_IF}{\cell }{\fs20 
RetainAll(ICollection)}{\cell }{\fs20 Non-fixed size bags, sets and lists}{\cell }{\fs20 Returns items removed from collection.  Collection only contains items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_IFMap}{\cell }{\fs20 RetainAll(ICollection)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 Returns items removed from collection.  Collection only
 contains items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_IFIntMap}{\cell }{\fs20 RetainAll(ICollection)}{\cell }{\fs20 
Non-fixed size integer maps}{\cell }{\fs20 Returns items removed from collection.  Collection only contains items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Retain_IFStrMap}{\cell }{\fs20 RetainAll(ICollection)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Returns items removed from collection.  Collection only contains items in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 SetComparator}{\cell 
}{\fs20 SetComparator}{\cell \cell }{\fs20 Changes comparator returned by }{\i\fs20 GetComparator}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 SetIgnoreErrors}{\cell }{\fs20 SetIgnoreErrors}{\cell \cell }{\fs20 Changes value returned by }{
\i\fs20 GetIgnoreErrors}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb 
\cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Complement}{\cell }{
\fs20 Complement(ISet)}{\cell }{\fs20 Non-fixed size sets}{\cell }{\fs20 Returns set that only contains items found in parameter that were not original members.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Intersect}{\cell }{\fs20 Intersect(ISet)}{\cell }{\fs20 Non-fixed size sets}{\cell }{\fs20 Returns empty set for empty receiving collection/ empty paramet
er collection; returns empty set for empty receiving collection/ non-empty parameter collection; returns empty set for non-empty receiving collection/ empty parameter collection; returns empty set for non-empty receiving collection/ non-empty parameter co
llection with no common items; returns set of common items for non-empty receiving collection/ non-empty parameter collection with common items.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Union}{\cell }{\fs20 Union(ISet)}{\cell }{\fs20 Non-fixed size sets}{\cell }{\fs20 Returns empty set for empty receiving collection/ empty parameter collect
ion; returns set of parameter items for empty receiving collection/ non-empty parameter collection; set of collection items for non-empty receiving collection/ empty parameter collection; returns set of parameter items and collection items for non-empty r
eceiving collection/ non-empty parameter collection with no common items; returns set of parameter items and collection items for non-empty receiving collection/ non-empty parameter collection with common items.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Delete_Fix}{\cell }{\fs20 Delete}{\cell }{\fs20 Fixed size lists}{\cell }{\fs20 Returns nil and size does not change.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Delete_NonFix}{\cell }{\fs20 Delete}{\cell }{\fs20 Non-fixed size lists}{\cell }{\fs20 
Returns removed item and size decreases by one.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Exchange}{\cell }{\fs20 Exchange}{\cell }{\fs20 Lists}{\cell }{\fs20 
Item at original position is occupied by other item.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 First}{\cell }{\fs20 First}{\cell }{\fs20 Lists}{\cell }{\fs20 
Returns nil for empty list; returns first item for non-empty list.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetDuplicates}{\cell }{\fs20 GetDuplicates}{\cell 
}{\fs20 Lists}{\cell }{\fs20 Returns true by default.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetSorted}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Lists}{\cell }{\fs20 Returns false by default.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 IndexOf}{\cell }{\fs20 IndexOf}{\cell }{\fs20 Lists}{\cell }{\fs20 Returns -1 for item not in list; returns 1 for item that is second in list.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Insert_Fix}{\cell }{\fs20 Insert}{\cell }{\fs20 Fixed size lists}{\cell }{\fs20 Returns false and size is not changed.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Insert_NonFix}{\cell }{\fs20 Insert}{\cell }{\fs20 Non-fixed size lists}{\cell }{\fs20 
Returns true, size is increased by one and item is inserted at position for non-empty, unsorted list; returns true, size is increased by one, item is inserted at position for non-empty, sorted list and list is no longer sorted.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Insert_Arr}{\cell }{\fs20 InsertAll(Array)}{\cell }{\fs20 Non-fixed size lists}{\cell }{\fs20 
First item of array found at insert position, second item of array found at insert position + 1.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Insert_IF}{\cell }{
\fs20 InsertAll(ICollection)}{\cell }{\fs20 Non-fixed size lists}{\cell }{\fs20 First item of parameter collection found at insert position, second item of parameter collection found at insert position + 1.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Last}{\cell }{\fs20 Last}{\cell }{\fs20 Lists}{\cell }{\fs20 Returns nil for empty list; returns last item for non-empty list.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 SetDuplicates}{\cell }{\fs20 SetDuplicates}{\cell }{\fs20 Lists}{\cell }{\fs20 Changes value returned by }{\i\fs20 
GetDuplicates}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 SetItem}{\cell }{\fs20 SetItem}{\cell }{\fs20 Lists}{\cell }{\fs20 
Changes item at position for duplicates list; fails for non-duplicate list where item already exists.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 SetSorted}{
\cell }{\fs20 SetSorted}{\cell }{\fs20 Lists}{\cell }{\fs20 Changes value returned by GetSorted and Sorted; set to true - items are in sorted order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Sort}{\cell }{\fs20 Sort}{\cell }{\fs20 Lists}{\cell }{
\fs20 Items are in sorted order according to parameter comparator.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_NonNat}{\cell }{\fs20 ContainsKey}{\cell }{\fs20 Map implementations that don\rquote t require natural keys.}{\cell }{\fs20 Returns false for key not in non-natural key collection; returns tr
ue for key in non-natural key collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_Nat}{\cell }{\fs20 ContainsKey}{\cell \cell }{\fs20 
Returns false for key not equal to any key in natural key collection; returns true for key equal but not the same as one in natural key collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb 
\cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_Arr}{\cell }{\fs20 ContainsAllKey(Array)}{\cell }{\fs20 Maps}{\cell }{\fs20 
Returns true for zero-length array; returns false for array containing no keys found in original collection; returns false for array where some (but not all) keys are found in original collection; returns true for array containing only keys found i
n original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb 
\cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_IF}{\cell }{
\fs20 ContainsAllKey(ICollection)}{\cell }{\fs20 Maps}{\cell }{\fs20 Returns true for zero-size parameter collection; returns false for parameter collection containing no keys found in original collection; returns false for parameter collection where so
me (but not all) keys are found in original collection; returns true for parameter collection containing only keys found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Get_NonNat}{\cell }{\fs20 Get}{\cell }{\fs20 Map implementations that don\rquote t require natural keys.}{\cell }{\fs20 Returns nil if key is not present in non-n
atural key map; returns item if key is present in non-natural key map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Get_Nat}{\cell }{\fs20 Get}{\cell \cell }{
\fs20 Returns nil if key is not equal to existing key in natural key map; returns item if key is equal to existing key in natural key map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeyComparator_NonNat}{\cell }{\fs20 GetKeyComparator}{\cell }{\fs20 Non-natural key collection}{\cell }{\fs20 Returns singleton }{\i\fs20 TDefaultComparator}{\fs20 
 instance when map does not use natural keys.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeyComparator_Nat}{\cell }{\fs20 GetKeyComparator}{\cell }{\fs20 
Natural key collection}{\cell }{\fs20 Returns singleton }{\i\fs20 TNaturalComparator}{\fs20  instance when map uses natural keys.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeyIterator}{\cell }{\fs20 GetKeyIterator}{\cell \cell }{\fs20 Iterator returns keys that match keys added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeys}{\cell }{\fs20 GetKeys}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns same keys as added to map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetMapIterator}{\cell }{\fs20 GetMapIterator}{\cell \cell }{\fs20 
Iterator returns keys and items that match keys and items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetMapIteratorByKey_Filter}{\cell }{
\fs20 GetMapIteratorByKey(Filter)}{\cell }{\fs20 Maps implementations that don\rquote t require natural items.\cell Iterator returns keys and items where keys match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetMapIteratorByKey_Func}{\cell }{\fs20 GetMapIteratorByKey(FilterFunc)}{\cell }{\fs20 Maps implementations that don\rquote t require natural items.\cell 
Iterator returns keys and items where keys match filter.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalKeyIID_Equ}{\cell }{\fs20 GetNaturalKeyIID}{\cell 
}{\fs20 Map implementations that use }{\i\fs20 IEquatable}{\fs20  for natural keys.}{\cell }{\fs20 Returns IID of }{\i\fs20 IEquatable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalKeyIID_Comp}{\cell }{\fs20 GetNaturalKeyIID}{\cell }{\fs20 Map implementations that use }{\i\fs20 IComparable}{\fs20  for natural keys.}{\cell }{\fs20 Returns IID of }{\i\fs20 IComparable}{
\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalKeyIID_Hash}{\cell }{\fs20 GetNaturalKeyIID}{\cell }{\fs20 Map implementations that use }{\i\fs20 
IHashable}{\fs20  for natural keys.}{\cell }{\fs20 Returns IID of }{\i\fs20 IHashable}{\fs20 .}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
GetNaturalKeysOnly_Both}{\cell }{\fs20 GetNaturalKeysOnly}{\cell }{\fs20 Implementations that don\rquote t require natural keys.}{\cell }{\fs20 Returns false when natural keys not set at construction; returns true when natural keys set at construction.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalKeysOnly_Nat}{\cell }{\fs20 GetNaturalKeysOnly}{\cell }{\fs20 Implementations that require natural keys.}{
\cell }{\fs20 Returns true when natural keys not set at construction; returns true when natural keys set at construction.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 GetValues}{\cell }{\fs20 GetValues}{\cell \cell }{\fs20 Returns same values as added to map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 KeyAllowed_NonNat}
{\cell }{\fs20 KeyAllowed}{\cell }{\fs20 Non-natural key maps\cell Returns ceOK for non-natural key with non-natural key map; returns ceOK for natural key with non-natural key map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 KeyAllowed_Nat}{\cell }{\fs20 KeyAllowed}{\cell }{\fs20 Natural key maps\cell 
Returns ceNotNaturalItem for non-natural key with natural key map; returns ceOK for natural key with natural key map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 MatchingKey_ArrNonNat}{\cell }{\fs20 MatchingKey(Array)}{\cell }{\fs20 Implementations that don\rquote t require natural keys.}{\cell }{\fs20 
Non-natural key map - returns empty collection for empty receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for 
non-empty receiving collection/ empty parameter array; returns collection containing two matching keys where two keys in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 MatchingKey_ArrNat}{\cell }{\fs20 MatchingKey(Array)}{\cell \cell }{\fs20 Natural key map - returns empty collection for empt
y receiving collection/ empty parameter array; returns empty collection for empty receiving collection/ non-empty parameter array; returns empty collection for non-empty receiving collection/ empty parameter array; returns collection containing two matchi
ng keys where two keys in receiving collection match parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 MatchingKey_IFNonNat}{\cell }{\fs20 
MatchingKey(ICollection)}{\cell }{\fs20 Implementations that don\rquote t require natural keys.}{\cell }{\fs20 Non-natural key map - returns empty collection for empty receiving collection/ empty parame
ter collection; returns empty collection for empty receiving collection/ non-empty parameter collection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching keys where two key
s in receiving collection match parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 MatchingKey_IFNat}{\cell }{\fs20 MatchingKey(ICollection)}{
\cell \cell }{\fs20 Natural key map - returns empty collection for empty receiving collection/ empty parameter collection; returns empty collection for empty receiving collection
/ non-empty parameter collection; returns empty collection for non-empty receiving collection/ empty parameter collection; returns collection containing two matching keys where two keys in receiving collection match parameter collection.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_Item}{\cell }{\fs20 Put(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Fails if item is non-natural; returns nil and collection contains item for natural item where item was not already present; returns item and collection still contains item for natural item where item was already present.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_KeyItem}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\fs24 \cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns nil and collection contains item where item was not already present; returns replaced item and collection contains item where another item was already associated with key.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_Arr}{\cell }{\fs20 Put(Array)}{\cell \cell }{\fs20 Returns empty collection and map contains items in array f
or empty map; returns collection of replaced items and maps contains items in array for non-empty map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IF}{\cell 
}{\fs20 Put(ICollection)}{\cell \cell }{\fs20 Returns empty collection and map contains items in parameter collection for empty map; returns collection of replaced items and maps contains items in parameter collection for non-empty map.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IMap}{\cell }{\fs20 Put(IMap)}{\cell \cell }{\fs20 
Returns empty collection and map contains items in parameter map for empty map; returns collection of replaced items and maps contains items in parameter map for non-empty map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_Key}{\cell }{\fs20 RemoveKey(Key)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 
Returns nil where key not found in collection; returns associated item where key found in collection and collection no longer contains key.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_Arr}{\cell }{\fs20 RemoveAllKey(Array)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 Returns collection of removed items.  Collection does not contain any keys found in parameter array.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_IF}{\cell }{\fs20 RemoveAllKey(ICollection)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 
Returns collection of removed items.  Collection does not contain any keys found in parameter collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RetainKey_Arr}{\cell }{\fs20 RetainAllKey(Array)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 Returns collection of removed items.  Collection only contains keys in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RetainKey_IF}{\cell }{\fs20 RetainAllKey(ICollection)}{\cell }{\fs20 Non-fixed size maps}{\cell }{\fs20 Returns collection of removed items.  Collection only contains keys in parameter collection.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_Int}{\cell }{\fs20 ContainsKey}{\cell }{\fs20 Integer maps\cell 
Returns false for key not equal to any key in integer map; returns true for key equal but not the same as one in integer.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_ArrInt}{\cell }{\fs20 ContainsAllKey(Array)}{\cell }{\fs20 Integer maps}{\cell }{\fs20 
Returns true for zero-length array; returns false for array containing no keys found in original collection; returns false for array where some (but not all) keys are found in original collection; returns true for array containing only keys found 
in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Get_Int}{\cell }{\fs20 Get}{\cell }{\fs20 Integer maps\cell 
Returns nil if key is not equal to existing key in integer map; returns item if key is equal to existing key in integer map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeys_Int}{\cell }{\fs20 GetKeys}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Returns same keys as added to map contained in TIntegerWrapper.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetMapIterator_Int}{\cell }{\fs20 GetMapIterator}{
\cell }{\fs20 Integer maps}{\cell }{\fs20 Iterator returns keys and items that match keys and items added to collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 GetValues_Int}{\cell }{\fs20 GetValues}{\cell }{\fs20 Integer maps}{\cell }{\fs20 Returns same values as added to map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_ItemInt}{\cell }{\fs20 Put(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps}{\fs24 \cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 F
ails if item is non-natural; returns nil and collection contains item for natural item where item was not already present; returns item and collection still contains item for natural item where item was already present.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_KeyItemInt}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps}{\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns nil and collection contains item where item was not already present; returns replaced item and collection contains item where another item was already associated with key.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_ArrInt}{\cell }{\fs20 PutAll(Array)}{\cell }{\fs20 Integer maps}{\cell }{\fs20 Returns empty collection and 
map contains items in array for empty map; returns collection of replaced items and maps contains items in array for non-empty map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IFInt}{\cell }{\fs20 PutAll(ICollection)}{\cell }{
\fs20 Integer maps}{\cell }{\fs20 Returns empty collection and map contains items in parameter collection for empty map; returns collection of replaced items and maps contains items in parameter collection for non-empty map.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IIntMap}{\cell }{\fs20 Put(IIntegerMap)}{\cell }{\fs20 Integer maps}{\cell }{\fs20 
Returns empty collection and map contains items in parameter map for integer empty map; returns collection of replaced items and maps contains items in parameter map for non-empty integer map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_KeyInt}{\cell }{\fs20 RemoveKey(Key)}{\cell }{\fs20 Non-fixed size integer maps}{\cell }{\fs20 
Returns nil where key not found in collection; returns associated item where key found in collection and collection no longer contains key.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_ArrInt}{\cell }{\fs20 RemoveAllKey(Array)}{\cell }{\fs20 Non-fixed size integer maps}{\cell }{\fs20 
Returns collection of removed items.  Collection does not contain any keys found in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RetainKey_ArrInt}{\cell }{\fs20 RetainAllKey(Array)}{\cell }{\fs20 Non-fixed size 
integer maps}{\cell }{\fs20 Returns collection of removed items.  Collection only contains keys in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021
\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_Str}{\cell }{\fs20 ContainsKey}{\cell }{\fs20 String maps\cell Returns false for key not equal to any key in integer map; returns true for key equal but not the same as one in i
nteger.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKey_ArrStr}{\cell }{\fs20 ContainsAllKey(Array)}{
\cell }{\fs20 String maps}{\cell }{\fs20 Returns true for zero-length array; returns false for array containing no keys found in original collection; returns false for array where some (but not all) keys are found in original collectio
n; returns true for array containing only keys found in original collection.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Get_Str}{\cell }{\fs20 Get}{\cell }{\fs20 String maps\cell Returns nil if key is not equal to existing key in integer map; returns item if key is equal to existing key in integer map.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetKeys_Str}{\cell }{\fs20 GetKeys}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps}{\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns same keys as added to map contained in TStringWrapper.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetMapIterator_Str}{\cell }{\fs20 GetMapIterator}{\cell }{\fs20 String maps}{\cell }{\fs20 Iterator returns keys and items that match keys and items added to collection.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetValues_Str}{\cell }{\fs20 GetValues}{\cell }{\fs20 String maps}{\cell }{\fs20 Returns same values as added to map.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_ItemStr}{\cell }{\fs20 Put(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps}{\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Fails if item is non-natural; returns nil and collection contains item for natural item where item was not already present; returns item and collection still contains item for natural item where item was already present.}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_KeyItemStr}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps}{\fs24 
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Returns nil and collection contains item where item was not already present; returns replaced item and collection contains item where another item was already associated with key.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_ArrStr}{\cell }{\fs20 PutAll(Array)}{\cell }{\fs20 String maps}{\cell }{\fs20 
Returns empty collection and map contains items in array for empty map; returns collection of replaced items and maps contains items in array for non-empty map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IFStr}{\cell }{\fs20 PutAll(ICollection)}{\cell }{\fs20 String maps}{\cell }{\fs20 Returns empty collection and map con
tains items in parameter collection for empty map; returns collection of replaced items and maps contains items in parameter collection for non-empty map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Put_IStrMap}{\cell }{\fs20 Put(IStringMap)}{\cell \cell }{\fs20 Returns empty collection and map contains items in parameter map for st
ring empty map; returns collection of replaced items and maps contains items in parameter map for non-empty string map.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 RemoveKey_KeyStr}{\cell }{\fs20 RemoveKey(Key)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 Returns nil where key not found in collection; returns associated item where key found in collection and collection no longer contains key.}{
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKey_ArrStr}{\cell }{\fs20 RemoveAllKey(Array)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Returns collection of removed items.  Collection does not contain any keys found in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021
\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RetainKey_ArrStr}{\cell }{\fs20 RetainAllKey(Array)}{\cell }{\fs20 Non-fixed size string maps}{\cell }{\fs20 
Returns collection of removed items.  Collection only contains keys in parameter array.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\adjustright {
\par }\pard\plain \s2\sb120\sa120\nowidctlpar\outlinelevel1\adjustright \b\f1 {\page Performance Test Descriptions
\par }\trowd \trgaph108\trkeep\trhdr \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\b\fs20 Test name
}{\cell }{\b\fs20 Function/ property tested}{\cell }{\b\fs20 Used for}{\cell }{\b\fs20 Description}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CreateNonNatural\cell Create(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\cell Creates non-natural collection from array.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs24 \row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 CreateNatural\cell Create(Array)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\cell 
Creates natural collection from array.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs24 \row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddNonNaturalRandom}{\cell }{\fs20 Add(Item)}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size bags, sets and lists\cell Adds to collection from shuffled list of non-natural items.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs24 \row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddNonNaturalAscending}{\cell }{\fs20 Add(Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size bags, sets and lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of non-natural items in ascending order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 AddNonNaturalDescending\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size bags, sets and lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to collection from list of non-natural items in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddNaturalRandom\cell Add(Item)\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections\cell Adds to collection from shuffled list of natural items.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddNaturalAscending\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to collection from list of natural items in ascending order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddNaturalDescending\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of natural items in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddSortedNonNaturalRandom\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from shuffled list of non-natural items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
AddSortedNonNaturalAscending\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to sorted list from list of non-natural items in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddSortedNonNaturalDescending\cell Add(Item)
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of non-natural items in descending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddSortedNaturalRandom\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from shuffled list of natural items.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 AddSortedNaturalAscending\cell Add(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to sorted list from list of natural items in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 AddSortedNaturalDescending\cell Add(Item)\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of natural items in descending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 InsertNonNaturalRandom\cell Insert(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Inserts non-natural item into list at random positions.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 InsertNonNaturalBegin\cell Insert(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Inserts non-natural item into list at beginning.
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 InsertNonNaturalEnd\cell Insert(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Inserts non-natural item into list at end.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 InsertNaturalRandom\cell Insert(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Inserts natural item into list at random positions.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 InsertNaturalBegin\cell Insert(Item)\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Inserts natural item into list at beginning.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 InsertNaturalEnd\cell 
Insert(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Inserts natural item into list at end.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNonNaturalRandom}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell Adds to map from shuffled list of non-natural keys.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
PutNonNaturalAscending}{\cell }{\fs20 Put(Key, Item)}{\cell }{\fs20 Maps}{\cell }{\fs20 Adds to map from list of non-natural keys in ascending order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNonNaturalDescending\cell Put(Key, Item)\cell Maps\cell Adds to collection from list of non-natural keys in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalRandom}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Maps\cell Adds to map from shuffled list of natural keys.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalAscending}{\cell }{\fs20 Put(Key, Item)}{\cell }{\fs20 Maps}{\cell }{\fs20 Adds to map from list of natural keys in ascending order.}
{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalDescending\cell Put(Key, Item)\cell Maps\cell Adds to collection from list of natural keys in descending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalRandomInt}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Integer maps
\cell Adds to map from shuffled list of integers.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalAscendingInt}{\cell }{\fs20 Put(Key, Item)}{\cell }{\fs20 Integer maps}
{\cell }{\fs20 Adds to map from list of integers in ascending order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalDescendingInt\cell Put(Key, Item)
\cell Integer maps\cell Adds to collection from list of integers in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalRandomStr}{\cell }{\fs20 Put(Key, Item)}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {String maps\cell Adds to map from shuffled list of strings.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalAscendingStr}{\cell }{\fs20 Put(Key, Item)}{\cell }{\fs20 String maps}{\cell }{\fs20 Adds to map from list of 
strings in ascending order.}{\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 PutNaturalDescendingStr\cell Put(Key, Item)\cell String maps\cell 
Adds to collection from list of strings in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNonNaturalRandom\cell Remove(Item)\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of non-natural items in ascending order then removes them in random order.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNonNaturalAscending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Non-fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of non-natural items in ascending order then removes them in ascending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNonNaturalDescending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of non-natural items in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNaturalRandom\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of natural items in ascending order then removes them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNaturalAscending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Adds to collection from list of natural items in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveNaturalDescending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {Non-fixed size collections\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to collection from list of natural items in ascending order then removes them in descending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveSortedNonNaturalRandom\cell Remove(Item)\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of non-natural items in ascending order then removes them in random order.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveSortedNonNaturalAscending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of non-natural items in ascending order then removes them in ascending order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveSortedNonNaturalDescending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists
\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of non-natural items in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveSortedNaturalRandom\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to sorted list from list of natural items in ascending order then removes them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveSortedNaturalAscending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Adds to sorted list from list of natural items in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveSortedNaturalDescending\cell Remove(Item)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size lists\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to sorted list from list of natural items in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveKeyNonNaturalRandom\cell RemoveKey(Key)\cell Non fixed size maps\cell Adds to map from list of non-natural keys in ascending order then removes them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNonNaturalAscending\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size maps\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of non-natural keys in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNonNaturalDescending\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 Adds to map from list of non-natural keys in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveKeyNaturalRandom\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to map from list of natural keys in ascending order then removes them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalAscending
\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to map from list of natural keys in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalDescending\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {Non-fixed size maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of natural keys in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalRandomInt\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
Non-fixed size integer maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of integers in ascending order then removes them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalAscendingInt\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size integer maps\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of integers in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalDescendingInt\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size integer maps\cell }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of integers in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalRandomStr\cell RemoveKey(Key)\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size string maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of strings in ascending order then removes them in random order.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 RemoveKeyNaturalAscendingStr\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {Non-fixed size string maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Adds to map from list of strings in ascending order then removes them in ascending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
RemoveKeyNaturalDescendingStr\cell RemoveKey(Key)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {Non-fixed size string maps\cell }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
Adds to map from list of strings in ascending order then removes them in descending order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsNonNaturalRandom\cell Contains(Item)\cell \cell Creates collection of non-natural items in ascending order then checks each item in random order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsNonNaturalFirst\cell Contains(Item)\cell \cell Creates collection of non-natural items in ascending order then check
s first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsNonNaturalLast\cell Contains(Item)\cell \cell 
Creates collection of non-natural items in ascending order then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {
\fs20 ContainsNaturalRandom\cell Contains(Item)\cell \cell Creates collection of natural items in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsNaturalFirst\cell Contains(Item)\cell \cell Creates collection of natural items in ascending order then checks first item a number of times equal to collection size.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsNaturalLast\cell Contains(Item)\cell \cell 
Creates collection of natural items in ascending order then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsSortedNonNaturalRandom\cell Contains(Item)\cell \cell Create sorted list of non-natural items in ascending order then checks each item in random order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsSortedNonNaturalFirst\cell Contains(Item)\cell \cell 
Creates sorted list of non-natural items in ascending order then checks first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsSortedNonNaturalLast\cell Contains(Item)\cell \cell Creates sorted list of non-natural items in ascending order then checks last item a number of times equal to collection size.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsSortedNaturalRandom\cell Contains(Item)\cell \cell 
Creates sorted list of natural items in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 
ContainsSortedNaturalFirst\cell Contains(Item)\cell \cell Creates sorted list of natural items in ascending order then checks first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row 
}\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsSortedNaturalLast
\cell Contains(Item)\cell \cell Creates sorted list of natural items in ascending order then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb 
\cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNonNaturalRandom\cell ContainsKey(Key)\cell Maps\cell 
Adds to map from list of non-natural keys in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Con
tainsKeyNonNaturalFirst\cell ContainsKey(Key)\cell Maps\cell Adds to map from list of non-natural keys in ascending order then checks first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {
\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNonNaturalLast\cell ContainsKey(Key)\cell Maps\cell Adds to map from list of non-natu
ral keys in ascending order then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalRandom
\cell ContainsKey(Key)\cell Maps\cell Adds to map from list of natural keys in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalFirst\cell ContainsKey(Key)\cell Maps\cell Adds to map from list of natural keys in ascending order then checks first item a number of times equal to collection size.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalLast\cell ContainsKey(Key)\cell Maps\cell Adds to map from list of natural keys in ascending order 
then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalRandomInt\cell 
ContainsKey(Key)\cell Integer maps\cell Adds to map from list of integers in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalFirstInt\cell ContainsKey(Key)\cell Integer maps\cell Adds to map from list of integers in ascending order then checks first item a number of times equal to collection size.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalLastInt\cell ContainsKey(Key)\cell Integer maps\cell 
Adds to map from list of integers in ascending order then checks last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalRandomStr\cell 
ContainsKey(Key)\cell String maps\cell Adds to map from list of strings in ascending order then checks each item in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021
\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalFirstStr\cell ContainsKey(Key)\cell String maps\cell Adds to map from list of strings in ascending order then checks first item a number of times equal to collection size.
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 ContainsKeyNaturalLastStr\cell ContainsKey(Key)\cell String maps\cell Adds to map from list of strings in ascending order then checks last ite
m a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetItemRandom\cell GetItem\cell Lists\cell 
Adds to list from list of non-natural items in ascending order then retrieves them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetItemFirst\cell 
GetItem\cell Lists\cell Adds to list from list of non-natural items in ascending order then retrieves first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetItemLast\cell GetItem\cell Lists\cell 
Adds to list from list of non-natural items in ascending order then retrieves last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021
\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNonNaturalRandom\cell Get\cell Maps\cell Adds to map from list of non-natural keys in ascending order then retrieves them in random order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNonNaturalFirst\cell Get\cell Maps\cell 
Adds to map from list of non-natural keys in ascending order then retrieves first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNonNaturalLast\cell Get\cell Maps\cell Adds to map from list of non-natural keys in ascending order then retrieves last item a number of times equal to collection size.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalRandom\cell Get\cell Maps\cell Adds to map from list of natural keys in ascending order then retrieves them in random order.
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalFirst\cell Get\cell Maps\cell 
Adds to map from list of natural keys in ascending order then retrieves first item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalLast\cell Get\cell Maps
\cell Adds to map from list of natural keys in ascending order then retrieves last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalRandomInt\cell Get\cell Integer maps\cell Adds to map from list of integers in ascending order then retrieves them in random order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalFirstInt\cell Get\cell Integer maps\cell Adds to map from list of integers in ascending order then retrieves first item a number of times equal to collection size.
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalLastInt\cell Get\cell Integer maps\cell 
Adds to map from list of integers in ascending order then retrieves last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021
\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalRandomStr\cell Get\cell String maps\cell Adds to map from list of strings in ascending order then retrieves them in random order.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalFirstStr\cell Get\cell String maps\cell Adds to map from list of strings in ascending order then retrieves first i
tem a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx1735
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9021\pard\plain \s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 GetNaturalLastStr\cell Get\cell String maps\cell 
Adds to map from list of strings in ascending order then retrieves last item a number of times equal to collection size.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\trowd \trgaph108 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1735\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3155\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4825\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9021\pard\plain 
\s22\nowidctlpar\widctlpar\intbl\adjustright {\fs20 Iterator\cell (Iterator)\cell Bags, sets and lists\cell Creates collection of non-natural items in ascending order then iterates over every item.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20 {\row }\pard\plain \s22\nowidctlpar\widctlpar\adjustright {
\par }}