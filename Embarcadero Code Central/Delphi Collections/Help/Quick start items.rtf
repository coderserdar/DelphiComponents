{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}{\f25\fswiss\fcharset161\fprq2 Arial Greek;}
{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}{\f28\fmodern\fcharset238\fprq1 Courier New CE;}{\f29\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f31\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f32\fmodern\fcharset162\fprq1 Courier New Tur;}{\f33\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \snext0 Normal;}{\s1\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext15 footnote text;}{\s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid \sbasedon0 \snext27 Topic Title;}{\*\cs17 \additive \f1\fs16\uldb \sbasedon10 
SmallWindowLink Display;}{\s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid \sbasedon0 \snext0 Heading;}{\*\cs19 \additive \super \sbasedon10 footnote reference;}{\s20\nowidctlpar\widctlpar\tqc\tx4153\tqr\tx8306\adjustright 
\f1\fs20\lang2057\cgrid \sbasedon0 \snext0 header;}{\s21\nowidctlpar\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext21 footer;}{\*\cs22 \additive \f2\fs20 \sbasedon10 Code;}{\*\cs23 \additive \f1\fs16\ul \sbasedon17 
SmallPopupLink Display;}{\*\cs24 \additive \v\f1\fs16\cf2 \sbasedon10 SmallWindowLink Data;}{\*\cs25 \additive \v\f1\fs16\ul\cf2 \sbasedon23 SmallPopupLink Data;}{\*\cs26 \additive \f1\fs20\uldb \sbasedon10 WindowLink Display;}{
\s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 NonScrollable;}{\*\cs28 \additive \v\f1\fs20\cf2 \sbasedon10 WindowLink Data;}{\*\cs29 \additive \b\f2\fs20 \sbasedon10 Code Keyword;}}{\info{\title Classname}
{\author Matthew Greet}{\operator Matthew Greet}{\creatim\yr2003\mo4\dy3\hr15\min29}{\revtim\yr2003\mo4\dy5\hr1\min53}{\version21}{\edmins105}{\nofpages2}{\nofwords463}{\nofchars2640}{\*\company  }{\nofcharsws0}{\vern71}}
\paperw11907\paperh16840\margl0\margr0\margt0\margb0 \widowctrl\ftnbj\aenddoc\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0{\*\template D:\\Projects\\WinHelp Templates\\Working\\Basic Page.dot}{\*\ftnsep \pard\plain 
\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsep 
\par }}{\*\ftnsepc \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsepc 
\par }}{\*\ftncn \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }}\sectd \psz9\linex0\headery0\footery0\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {
\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ Quick start items}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{
 Quick start - Items}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Quick start;Items}}}{ Quick start \endash  Items}{\cs24 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Using your exisiting classes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {It is unlikely your existing data classes can be adapted for this library quickly, especially if they don\rquote 
t implement interface reference counting.  Instances of such classes can be accomodated using wrappers, particularly }{\cs26\uldb TObjectWrapper}{\cs28\v\cf2 TObjectWrapper}{.  The wrapper is created using the data object and, unless }{\cs26\uldb 
AutoDestroy}{\cs28\v\cf2 TObjectWrapper_AutoDestroy}{ is switched off, will destroy the object when the wrappers is no longer being referenced.  }{\i AutoDestroy}{ must be switched off if the object, for some reason, is supposed to exist beyond its existe
nce in any collection, even a \lquote master collection\rquote .  The object can be retrieved by obtaining it as an item, typecasting to }{\cs26\uldb IObject}{\cs28\v\cf2 IObject}{ and invoking the }{\cs26\uldb Value}{\cs28\v\cf2 IObject_Value}{
 property.  An example is shown below.
\par 
\par }{\cs29\b\f2 var
\par }{\cs22\f2     Set: ISet;
\par     Iterator: IIterator;
\par     MyData: TMyDataClass;
\par }{\cs29\b\f2 begin
\par }{\cs22\f2     Set := TListSet.Create;
\par     MyData := TMyDataClass.Create(Whatever);
\par     Set.Add(TObjectWrapper.Create(MyData) }{\cs29\b\f2 as}{\cs22\f2  ICollectable);
\par     }{\cs22\b\f2 \'85
\par }{\cs22\f2     Iterator := Set.GetIterator;
\par     }{\cs29\b\f2 while}{\cs22\f2  }{\cs29\b\f2 not}{\cs22\f2  Iterator.EOF }{\cs29\b\f2 do}{\cs22\f2 
\par     }{\cs29\b\f2 begin
\par }{\cs22\f2         MyData := TMyDataClass(Iterator.CurrentItem }{\cs29\b\f2 as}{\cs22\f2  IObject).Value);
\par         }{\cs29\b\f2 if}{\cs22\f2  SomeCondition }{\cs29\b\f2 then}{\cs22\f2 
\par         }{\cs29\b\f2 begin
\par }{\cs22\f2             Iterator.Remove;
\par             }{\cs22\f2\cf9 // Item and contained object is destroyed.
\par }{\cs22\f2             }{\cs22\f2\cf9 // MyData is a dangling pointer and should not be used.
\par }{\cs22\f2         }{\cs29\b\f2 end}{\cs22\f2 ;
\par         }{\cs22\b\f2 \'85
\par }{\cs22\f2         Iterator.Next;
\par     }{\cs29\b\f2 end}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Creating new classes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Collectable items must implement }{\cs26\uldb ICollectable}{\cs28\v\cf2 ICollectable}{ and ideally implement }{\cs26\uldb IComparable}{\cs28\v\cf2 IComparable}{, }{\cs26\uldb 
IHashable}{\cs28\v\cf2 IHashable}{ or both.  The template class }{\cs26\uldb TAbstractItem}{\cs28\v\cf2 TAbstractItem}{ is a suitable base class.  Note, despite that }{\i IComparable}{ and }{\i IHashable}{ inherit from }{\cs26\uldb IEquatable}{
\cs28\v\cf2 IEquatable}{, natural items must explicitly declare that it implements }{\i IEquatable}{.  Also, it is considered good practice to typecast the item to an interface type providing the required
 functionality but it is possible avoid writing an interface with mirrored functionality.  See }{\cs26\uldb How can I convert between interface and class types?}{\cs28\v\cf2 How can mix interface and class}{.  An example is shown below.
\par 
\par }{\cs22\f2 TMyData = }{\cs29\b\f2 class}{\cs22\f2 (TAbstractItem, IEquatable, IHashable)
\par }{\cs29\b\f2 private
\par }{\cs22\f2     FData1: String;
\par     FData2: String;
\par }{\cs29\b\f2 public
\par }{\cs22\f2     }{\cs29\b\f2 constructor}{\cs22\f2  Create;
\par     }{\cs29\b\f2 function}{\cs22\f2  Equals}{\f2  (}{\cs29\b\f2 const}{\f2  Item: ICollectable): Boolean
\par     }{\cs29\b\f2 function}{\f2  HashCode: Integer;
\par }{\cs22\f2     }{\cs29\b\f2 property}{\cs22\f2  Data1: }{\cs29\b\f2 String}{\cs22\f2  }{\cs29\b\f2 read}{\cs22\f2  FData1 }{\cs29\b\f2 write}{\cs22\f2  FData1;
\par     }{\cs29\b\f2 property}{\cs22\f2  Data2: }{\cs29\b\f2 String}{\cs22\f2  }{\cs29\b\f2 read}{\cs22\f2  FData2 }{\cs29\b\f2 write}{\cs22\f2  FData2;
\par }{\cs29\b\f2 end}{\cs22\f2 ;
\par 
\par }{\cs29\b\f2 function}{\cs22\f2  TMyData.Equals(}{\cs29\b\f2 const}{\cs22\f2  Item: ICollectable): Boolean;
\par }{\cs29\b\f2 var
\par }{\cs22\f2     MyData: TMyData;
\par }{\cs29\b\f2 begin
\par }{\cs22\f2     MyData := (Item.GetInstance }{\cs29\b\f2 as}{\cs22\f2  TMyData);
\par     Result := (Self.Data1 = MyData.Data2) and (Self.Data2 = MyData.Data2);
\par }{\cs29\b\f2 end}{\cs22\f2 ;
\par 
\par }{\cs29\b\f2 function}{\cs22\f2  TMyData.HashCode: Boolean;
\par }{\cs29\b\f2 begin
\par }{\cs22\f2     Result := TMiscCollectionLibrary.HashCode(Data1) }{\cs22\b\f2 xor}{\cs22\f2  TMiscCollectionLibrary.HashCode(Data2);
\par }{\cs29\b\f2 end}{\cs22\f2 ;
\par }{
\par 
\par Maps, integer maps and string maps aren\rquote t usually natural, so items don\rquote t need to implement }{\cs26\uldb IMappable}{\cs28\v\cf2 IMappable}{, }{\cs26\uldb IIntegerMappable}{\cs28\v\cf2 IIntegerMappable}{ or }{\cs26\uldb IStringMappable}{
\cs28\v\cf2 IStringMappable}{ as appropriate, but the value of an item\rquote s key is often a function of the item\rquote s data and it is convenient to make the key generator part of the item.  That is, items in maps (or integer ma
ps or string maps) are usually naturally mappable.  }{\cs26\uldb TAbstractMappable}{\cs28\v\cf2 TAbstractMappable}{, }{\cs26\uldb TAbstractIntegerMappable}{\cs28\v\cf2 TAbstractIntegerMappable}{ and }{\cs26\uldb TAbstractStringMappable}{\cs28\v\cf2 
TAbstractStringMappable}{ are suitable template classes: subclasses need only implement the MakeKey function and handle its own data.  For example:-
\par 
\par }{\cs22\f2 TMyData2 = }{\cs29\b\f2 class}{\cs22\f2 (TAbstractStringMappable)
\par }{\cs29\b\f2 private
\par }{\cs22\f2     FData1: String;
\par     FData2: String;
\par }{\cs29\b\f2 protected
\par }{\cs22\f2     }{\cs29\b\f2 function}{\cs22\f2  MakeKey: }{\cs29\b\f2 String}{\cs22\f2 ;
\par }{\cs29\b\f2 public
\par }{\cs22\f2     }{\cs29\b\f2 constructor}{\cs22\f2  Create;
\par     }{\cs29\b\f2 property}{\cs22\f2  Data1: }{\cs29\b\f2 String}{\cs22\f2  }{\cs29\b\f2 read}{\cs22\f2  FData1 }{\cs29\b\f2 write}{\cs22\f2  FData1;
\par     }{\cs29\b\f2 property}{\cs22\f2  Data2: }{\cs29\b\f2 String}{\cs22\f2  }{\cs29\b\f2 read}{\cs22\f2  FData2 }{\cs29\b\f2 write}{\cs22\f2  FData2;
\par }{\cs29\b\f2 end}{\cs22\f2 ;
\par 
\par }{\cs29\b\f2 function}{\cs22\f2  TMyData2.MakeKey: }{\cs29\b\f2 String}{\cs22\f2 
\par }{\cs29\b\f2 begin
\par }{\cs22\f2     Result := Data1 + \rquote |\rquote  + Data2;
\par }{\cs29\b\f2 end}{\cs22\f2 ;
\par }{
\par 
\par }}