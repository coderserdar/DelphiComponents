{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times{\*\falt Times New Roman};}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica{\*\falt Arial};}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier{\*\falt Courier New};}
{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn{\*\falt Times New Roman};}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv{\*\falt Arial};}
{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York{\*\falt Times New Roman};}
{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f16\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f17\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f18\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 10 Pitch;}
{\f19\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 20 Pitch;}{\f20\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 5 Pitch;}{\f21\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 12 Pitch;}
{\f22\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 24 Pitch;}{\f23\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 6 Pitch;}{\f24\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 16.67 Pitch;}
{\f25\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times{\*\falt Times New Roman};}{\f26\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers;}{\f27\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}
{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f29\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f30\fswiss\fcharset0\fprq2{\*\panose 020b0602030504090204}Lucida Sans;}
{\f31\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f32\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f33\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f34\fmodern\fcharset0\fprq1{\*\panose 02010509020102010303}OCR A Extended;}{\f35\froman\fcharset0\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f36\fswiss\fcharset0\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}
{\f37\fswiss\fcharset0\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f38\fswiss\fcharset0\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f39\fdecor\fcharset0\fprq2{\*\panose 04040403030d02020704}Matisse ITC;}
{\f40\fdecor\fcharset0\fprq2{\*\panose 04020404030d07020202}Tempus Sans ITC;}{\f41\fdecor\fcharset0\fprq2{\*\panose 04040506030f02020702}Westminster;}{\f42\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f43\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f44\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Int A;}{\f45\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Int B;}
{\f46\fmodern\fcharset2\fprq1{\*\panose 00000000000000000000}LotusWP Box;}{\f47\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Type;}{\f48\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Icon;}
{\f49\froman\fcharset2\fprq2{\*\panose 00000000000000000000}Math A;}{\f50\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Math B;}{\f51\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Math C;}
{\f52\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f54\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Baskerville;}
{\f55\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Binner Gothic;}{\f56\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Centaur;}{\f57\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}
{\f58\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans;}{\f59\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans Condensed;}{\f60\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans Ultra Bold;}
{\f61\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic;}{\f62\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}News Gothic;}{\f63\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Nimrod;}
{\f64\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Onyx;}{\f65\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Botanical;}{\f66\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell;}
{\f67\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell Condensed;}{\f68\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell Light;}{\f69\fscript\fcharset0\fprq2{\*\panose 00000000000000000000}Brush Script;}
{\f70\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Perpetua;}{\f71\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Lydian;}{\f72\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}News Gothic Condensed;}
{\f73\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Photina Casual Black;}{\f74\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Abadi MT Condensed Extra Bold;}
{\f75\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT;}{\f76\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Arial Rounded MT Bold;}{\f77\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Verdana Ref;}
{\f78\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}MagicSymbols;}{\f79\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Gamekeys MT;}{\f80\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Microsoft Logo 95;}
{\f81\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}SWlogo;}{\f82\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers Condensed;}{\f83\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol;}
{\f84\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f85\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f86\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Trebuchet MS;}
{\f87\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f88\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Agency FB;}{\f89\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David;}
{\f90\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David Transparent;}{\f91\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam;}{\f92\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Miriam Fixed;}
{\f93\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Fixed Miriam Transparent;}{\f94\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam Transparent;}{\f95\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Rod;}
{\f96\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MS Reference 1;}{\f97\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MS Reference 2;}
{\f98\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT Tu{\*\falt Times New Roman};}{\f99\froman\fcharset0\fprq0{\*\panose 00000000000000000000}(normal text);}
{\f100\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}News Gothic MT CE;}{\f101\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}News Gothic MT Greek;}{\f102\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}News Gothic MT Tur;}
{\f103\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}News Gothic MT Baltic;}{\f104\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Handwriting CE;}
{\f105\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Greek;}{\f106\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Tur;}
{\f107\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Baltic;}{\f108\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Sans CE;}{\f109\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Sans Greek;}
{\f110\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Sans Tur;}{\f111\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Lucida Sans Baltic;}{\f112\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Int A CE;}
{\f113\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Int A Greek;}{\f114\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Int A Tur;}{\f115\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Int A Baltic;}
{\f116\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Int B CE;}{\f117\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Int B Greek;}{\f118\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Int B Tur;}
{\f119\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Int B Baltic;}{\f120\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Type CE;}{\f121\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Type Greek;}
{\f122\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Type Tur;}{\f123\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Type Baltic;}{\f124\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Icon CE;}
{\f125\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Icon Greek;}{\f126\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Icon Tur;}{\f127\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Icon Baltic;}
{\f128\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode CE;}{\f129\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Greek;}
{\f130\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Tur;}{\f131\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Baltic;}{\f132\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell CE;}
{\f133\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Greek;}{\f134\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Baltic;}{\f135\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell Condensed CE;}
{\f136\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Greek;}{\f137\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Baltic;}
{\f138\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell Light CE;}{\f139\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Light Greek;}{\f140\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Light Tur;}
{\f141\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Light Baltic;}{\f142\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}MagicSymbols CE;}{\f143\fnil\fcharset204\fprq2{\*\panose 00000000000000000000}MagicSymbols Cyr;}
{\f144\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}MagicSymbols Greek;}{\f145\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}MagicSymbols Tur;}{\f146\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}MagicSymbols Baltic;}
{\f147\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}SWlogo CE;}{\f148\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}SWlogo Greek;}{\f149\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}SWlogo Tur;}
{\f150\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}SWlogo Baltic;}{\f151\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol CE;}{\f152\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol Tur;}
{\f153\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Univers CE;}{\f154\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Univers Tur;}{\f155\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Tur;}
{\f156\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Tur;}{\f157\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Verdana Ref CE;}{\f158\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Verdana Ref Cyr;}
{\f159\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Verdana Ref Greek;}{\f160\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Verdana Ref Tur;}{\f161\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Verdana Ref Baltic;}
{\f162\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Univers Condensed CE;}{\f163\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Univers Condensed Tur;}{\f164\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Trebuchet MS CE;}
{\f165\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Trebuchet MS Tur;}{\f166\froman\fcharset238\fprq2 Times New Roman CE;}{\f167\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f169\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f170\froman\fcharset162\fprq2 Times New Roman Tur;}{\f171\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f172\fswiss\fcharset238\fprq2 Arial CE;}{\f173\fswiss\fcharset204\fprq2 Arial Cyr;}{\f175\fswiss\fcharset161\fprq2 Arial Greek;}
{\f176\fswiss\fcharset162\fprq2 Arial Tur;}{\f177\fswiss\fcharset186\fprq2 Arial Baltic;}{\f178\fmodern\fcharset238\fprq1 Courier New CE;}{\f179\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f181\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f182\fmodern\fcharset162\fprq1 Courier New Tur;}{\f183\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f256\fswiss\fcharset238\fprq2 Tahoma CE;}{\f257\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f259\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f260\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f261\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f268\fswiss\fcharset238\fprq2 Arial Black CE;}{\f269\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f271\fswiss\fcharset161\fprq2 Arial Black Greek;}
{\f272\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f273\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f352\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f353\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}
{\f355\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f356\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f358\froman\fcharset238\fprq2 Book Antiqua CE;}{\f359\froman\fcharset204\fprq2 Book Antiqua Cyr;}
{\f361\froman\fcharset161\fprq2 Book Antiqua Greek;}{\f362\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f363\froman\fcharset186\fprq2 Book Antiqua Baltic;}{\f364\fswiss\fcharset238\fprq2 Century Gothic CE;}
{\f365\fswiss\fcharset204\fprq2 Century Gothic Cyr;}{\f367\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f368\fswiss\fcharset162\fprq2 Century Gothic Tur;}{\f369\fswiss\fcharset186\fprq2 Century Gothic Baltic;}
{\f418\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f419\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f421\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f422\fmodern\fcharset162\fprq1 Lucida Console Tur;}
{\f484\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f485\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f487\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f488\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f489\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f508\froman\fcharset238\fprq2 Garamond CE;}{\f509\froman\fcharset204\fprq2 Garamond Cyr;}{\f511\froman\fcharset161\fprq2 Garamond Greek;}{\f512\froman\fcharset162\fprq2 Garamond Tur;}{\f513\froman\fcharset186\fprq2 Garamond Baltic;}
{\f670\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f671\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f673\fscript\fcharset161\fprq2 Comic Sans MS Greek;}{\f674\fscript\fcharset162\fprq2 Comic Sans MS Tur;}
{\f675\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f676\fswiss\fcharset238\fprq2 Impact CE;}{\f677\fswiss\fcharset204\fprq2 Impact Cyr;}{\f679\fswiss\fcharset161\fprq2 Impact Greek;}{\f680\fswiss\fcharset162\fprq2 Impact Tur;}
{\f681\fswiss\fcharset186\fprq2 Impact Baltic;}{\f688\fswiss\fcharset238\fprq2 Verdana CE;}{\f689\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f691\fswiss\fcharset161\fprq2 Verdana Greek;}{\f692\fswiss\fcharset162\fprq2 Verdana Tur;}
{\f693\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid 
\snext0 Normal;}{\s1\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext15 
footnote text;}{\s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid \sbasedon0 \snext27 Topic Title;}{\*\cs17 \additive \f1\fs16\uldb \sbasedon10 SmallWindowLink Display;}{\s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid 
\sbasedon0 \snext0 Heading;}{\*\cs19 \additive \super \sbasedon10 footnote reference;}{\s20\nowidctlpar\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 header;}{\s21\nowidctlpar\widctlpar
\tqc\tx4153\tqr\tx8306\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext21 footer;}{\*\cs22 \additive \f2\fs20 \sbasedon10 Code;}{\*\cs23 \additive \f1\fs16\ul \sbasedon17 SmallPopupLink Display;}{\*\cs24 \additive \v\f1\fs16\cf2 \sbasedon10 
SmallWindowLink Data;}{\*\cs25 \additive \v\f1\fs16\ul\cf2 \sbasedon23 SmallPopupLink Data;}{\*\cs26 \additive \f1\fs20\uldb \sbasedon10 WindowLink Display;}{\s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 
NonScrollable;}{\*\cs28 \additive \v\f1\fs20\cf2 \sbasedon10 WindowLink Data;}{\*\cs29 \additive \b\f2\fs20 \sbasedon10 Code Keyword;}{\*\cs30 \additive \v\f2\fs20\cf2 \sbasedon10 Code WindowLink Data;}{\*\cs31 \additive \f2\fs20\uldb \sbasedon10 
Code WindowLink Display;}}{\*\listtable{\list\listtemplateid134807553\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }
{\listname ;}\listid148331751}}{\*\listoverridetable{\listoverride\listid148331751\listoverridecount0\ls1}}{\info{\title Classname}{\author Matthew Greet}{\operator Matthew Greet}{\creatim\yr2003\mo1\dy22\hr17\min33}{\revtim\yr2004\mo5\dy31\hr11\min58}
{\version304}{\edmins343}{\nofpages38}{\nofwords2746}{\nofchars15655}{\*\company  }{\nofcharsws0}{\vern71}}\paperw28350\paperh28350\margl0\margr0\margt0\margb0 \widowctrl\ftnbj\aenddoc\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0
{\*\template D:\\Projects\\WinHelp Templates\\Working\\Delphi Interface.dot}{\*\ftnsep \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsep 
\par }}{\*\ftnsepc \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsepc 
\par }}{\*\ftncn \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }}\sectd \psz9\linex0\headery0\footery0\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {
\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Class}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IMap;Map}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap}}}{IMap}{\cs24 
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs23\fs16\ul Hierarchy}{\cs25\v\fs16\ul\cf2 IMap_Hierarchy}{        }{\cs17\fs16\uldb Properties}{\cs24\v\fs16\cf2 IMap_Properties_ByObj>Inspect}{        }{
\cs17\fs16\uldb Methods}{\cs24\v\fs16\cf2 IMap_Methods_ByObj >Inspect}{\cs17\fs16\uldb 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Defines the various addition, removal and search functions of map collections.
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Unit
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Collections
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {This interface declares that the implementing class is a map. Items are added with an associated key, which is used for fast retrieval using }{\cs26\uldb Get}{\cs28\v\cf2 IMap_Get}{
.  Duplicate items may exist but no two items may be associated with the same key.  It is common to use the }{\cs26\uldb Put(Key, Item)}{\cs28\v\cf2 IMap_Put(Key, Item)}{ function.
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Known implementing classes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs26\uldb IMap}{\cs28\v\cf2 IMap}{, }{\cs26\uldb THashMap}{\cs28\v\cf2 THashMap}{, }{\cs26\uldb TListMap}{\cs28\v\cf2 TListMap}{
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Hierarchy}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Hierarchy}}}{Hierarchy
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {IUnknown
\par }{\cs26\uldb 
\par ICollection}{\cs28\v\cf2 ICollection>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Properties_ByObj}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Properties}}}{IMap properties
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap>main}{        }{\cs17\fs16\uldb Alphabetically}{\cs24\v\fs16\cf2 IMap_Properties_Alpha}{        }{\cs23\fs16\ul Legend}{
\cs25\v\fs16\ul\cf2 Inspector_Legend}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {In IMap
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb KeyComparator}{\cs28\v\cf2 IMap_KeyComparator>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Items}{\cs28\v\cf2 IMap_Items>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalKeyIID}{\cs28\v\cf2 IMap_NaturalKeyIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalKeysOnly}{\cs28\v\cf2 IMap_NaturalKeysOnly>main}{
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Derived from ICollection
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb AsArray}{\cs28\v\cf2 ICollection_AsArray>main}{
\par }{\{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Capacity}{\cs28\v\cf2 ICollection_Capacity>main}{
\par }{\{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Comparator}{\cs28\v\cf2 ICollection_Comparator>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb FixedSize}{\cs28\v\cf2 ICollection_FixedSize>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb IgnoreErrors}{\cs28\v\cf2 ICollection_IgnoreErrors>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalItemIID}{\cs28\v\cf2 ICollection_NaturalItemIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalItemsOnly}{\cs28\v\cf2 ICollection_NaturalItemsOnly>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb Size}{\cs28\v\cf2 ICollection_Size>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Properties_Alpha}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Properties}}}{IMap properties
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap>main}{        }{\cs17\fs16\uldb By object}{\cs24\v\fs16\cf2 IMap_Properties_ByObj}{        }{\cs23\fs16\ul Legend}{
\cs25\v\fs16\ul\cf2 Inspector_Legend}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb AsArray}{\cs28\v\cf2 ICollection_AsArray>main}{
\par }{\{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Capacity}{\cs28\v\cf2 ICollection_Capacity>main}{
\par }{\{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Comparator}{\cs28\v\cf2 ICollection_Comparator>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb FixedSize}{\cs28\v\cf2 ICollection_FixedSize>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb KeyComparator}{\cs28\v\cf2 IMap_KeyComparator>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb IgnoreErrors}{\cs28\v\cf2 ICollection_IgnoreErrors>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs26\uldb Items}{\cs28\v\cf2 IMap_Items>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalItemIID}{\cs28\v\cf2 ICollection_NaturalItemIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalItemsOnly}{\cs28\v\cf2 ICollection_NaturalItemsOnly>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalKeyIID}{\cs28\v\cf2 IMap_NaturalKeyIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb NaturalKeysOnly}{\cs28\v\cf2 IMap_NaturalKeysOnly>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs26\uldb Size}{\cs28\v\cf2 ICollection_Size>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_KeyComparator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap KeyComparator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ KeyComparator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ KeyComparator}}}{IMap.KeyComparator
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Key comparator.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs22\f2  KeyComparator: IComparator;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Comparator for retrieving items using keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Items}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Items}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Items}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Items}}}{IMap.Items
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Items via key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs22\f2  Items[Key: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ]: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ;

\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Item at key position.  Return value is nil if item no is associated with key.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_NaturalKeyIID}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap NaturalKeyIID}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ NaturalKeyIID}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_NaturalKeyIID}}}{IMap.NaturalKeyIID
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Id of interface that must be implemented by natural keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs22\f2  NaturalKeyIID: TGUID;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
Read only.  Identifier of interface (IID) that must be implemented by keys to be considered natural by the map implementation .  This is only relevent for natural-key maps.  If equal to constant }{\i EquatableIID}{, the interface is }{\cs26\uldb 
IEquatable}{\cs28\v\cf2 IEquatable}{, }{\i ComparableIIID}{ for }{\cs26\uldb IComparable}{\cs28\v\cf2 IComparable}{ and }{\i HashableIIID}{ for }{\cs26\uldb IHashable}{\cs28\v\cf2 IHashable}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_NaturalKeysOnly}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap NaturalKeysOnly}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ NaturalKeysOnly}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_NaturalKeysOnly}}}{IMap.NaturalKeysOnly
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether map only accepts natural keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs22\f2  NaturalKeysOnly: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  True if map is a natural-key map and can only accept natural keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Methods_ByObj}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Methods}}}{IMap methods
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap>main}{        }{\cs17\fs16\uldb Alphabetically}{\cs24\v\fs16\cf2 IMap_Methods_Alpha}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {In IMap
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs26\uldb CloneAsMap}{\cs28\v\cf2 IMap_CloneAsMap>main}{
\par }{\cs26\uldb ContainsKey(ICollection)}{\cs28\v\cf2 IMap_ContainsKey(ICollection)>main}{
\par }{\cs26\uldb ContainsKey(Key)}{\cs28\v\cf2 IMap_ContainsKey(Key)>main}{
\par }{\cs26\uldb ContainsKey(Array)}{\cs28\v\cf2 IMap_ContainsKey(Array)>main}{
\par }{\cs26\uldb Get}{\cs28\v\cf2 IMap_Get>main}{
\par }{\cs26\uldb GetKeyComparator}{\cs28\v\cf2 IMap_GetKeyComparator>main}{
\par }{\cs26\uldb GetKeyIterator}{\cs28\v\cf2 IMap_GetKeyIterator>main}{
\par }{\cs26\uldb GetKeys}{\cs28\v\cf2 IMap_GetKeys>main}{
\par }{\cs26\uldb GetMapIterator}{\cs28\v\cf2 IMap_GetMapIterator>main}{
\par }{\cs26\uldb GetMapIteratorByKey(Filter)}{\cs28\v\cf2 IMap_GetMapIteratorByKey(Filter)>main}{
\par }{\cs26\uldb GetMapIteratorByKey(FilterFunc)}{\cs28\v\cf2 IMap_GetMapIteratorByKey(FilterFunc)>main}{
\par }{\cs26\uldb GetNaturalKeyIID}{\cs28\v\cf2 IMap_GetNaturalKeyIID>main}{
\par }{\cs26\uldb GetNaturalKeysOnly}{\cs28\v\cf2 IMap_GetNaturalKeysOnly>main}{
\par }{\cs26\uldb GetValues}{\cs28\v\cf2 IMap_GetValues>main}{
\par }{\cs26\uldb IsKeyAllowed}{\cs28\v\cf2 IMap_IsKeyAllowed>main}{
\par }{\cs26\uldb MatchingKey(ICollection)}{\cs28\v\cf2 IMap_MatchingKey(ICollection)>main}{
\par }{\cs26\uldb MatchingKey(Array)}{\cs28\v\cf2 IMap_MatchingKey(Array)>main}{
\par }{\cs26\uldb Put(ICollection)}{\cs28\v\cf2 IMap_Put(ICollection)>main}{
\par }{\cs26\uldb Put(IMap)}{\cs28\v\cf2 IMap_Put(IMap)>main}{
\par }{\cs26\uldb Put(Item)}{\cs28\v\cf2 IMap_Put(Item)>main}{
\par }{\cs26\uldb Put(Key, Item)}{\cs28\v\cf2 IMap_Put(Key, Item)>main}{
\par }{\cs26\uldb Put(Array)}{\cs28\v\cf2 IMap_Put(Array)>main}{
\par }{\cs26\uldb RemoveKey(ICollection)}{\cs28\v\cf2 IMap_RemoveKey(ICollection)>main}{
\par }{\cs26\uldb RemoveKey(Key)}{\cs28\v\cf2 IMap_RemoveKey(Key)>main}{
\par }{\cs26\uldb RemoveKey(Array)}{\cs28\v\cf2 IMap_RemoveKey(Array)>main}{
\par }{\cs26\uldb RetainKey(ICollection)}{\cs28\v\cf2 IMap_RetainKey(ICollection)>main}{
\par }{\cs26\uldb RetainKey(Array)}{\cs28\v\cf2 IMap_RetainKey(Array)>main}{
\par }{\cs26\uldb SetKeyComparator}{\cs28\v\cf2 IMap_SetKeyComparator>main}{
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Derived from ICollection
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs26\uldb Add(ICollection)}{\cs28\v\cf2 ICollection_Add(ICollection)>main}{
\par }{\cs26\uldb Add(Item)}{\cs28\v\cf2 ICollection_Add(Item)>main}{
\par }{\cs26\uldb Add(Array)}{\cs28\v\cf2 ICollection_Add(Array)>main}{
\par }{\cs26\uldb Clear}{\cs28\v\cf2 ICollection_Clear>main}{
\par }{\cs26\uldb Clone}{\cs28\v\cf2 ICollection_Clone>main}{
\par }{\cs26\uldb Contains(ICollection)}{\cs28\v\cf2 ICollection_Contains(ICollection)>main}{
\par }{\cs26\uldb Contains(Item)}{\cs28\v\cf2 ICollection_Contains(Item)>main}{
\par }{\cs26\uldb Contains(Array)}{\cs28\v\cf2 ICollection_Contains(Array)>main}{
\par }{\cs26\uldb Equals}{\cs28\v\cf2 ICollection_Equals>main}{
\par }{\cs26\uldb Find(Filter)}{\cs28\v\cf2 ICollection_Find(Filter)>main}{
\par }{\cs26\uldb Find(FilterFunc)}{\cs28\v\cf2 ICollection_Find(FilterFunc)>main}{
\par }{\cs26\uldb FindAll(Filter)}{\cs28\v\cf2 ICollection_FindAll(Filter)>main}{
\par }{\cs26\uldb FindAll(FilterFunc)}{\cs28\v\cf2 ICollection_FindAll(FilterFunc)>main}{
\par }{\cs26\uldb GetAsArray}{\cs28\v\cf2 ICollection_GetAsArray>main}{
\par }{\cs26\uldb GetCapacity}{\cs28\v\cf2 ICollection_GetCapacity>main}{
\par }{\cs26\uldb GetComparator}{\cs28\v\cf2 ICollection_GetComparator>main}{
\par }{\cs26\uldb GetDuplicates}{\cs28\v\cf2 ICollection_GetDuplicates>main}{
\par }{\cs26\uldb GetFixedSize}{\cs28\v\cf2 ICollection_GetFixedSize>main}{
\par }{\cs26\uldb GetIgnoreErrors}{\cs28\v\cf2 ICollection_GetIgnoreErrors>main}{
\par }{\cs26\uldb GetInstance}{\cs28\v\cf2 ICollection_GetInstance>main}{
\par }{\cs26\uldb GetIterator}{\cs28\v\cf2 ICollection_GetIterator>main}{
\par }{\cs26\uldb GetIterator(Filter)}{\cs28\v\cf2 ICollection_GetIterator(Filter)>main}{
\par }{\cs26\uldb GetIterator(FilterFunc)}{\cs28\v\cf2 ICollection_GetIterator(FilterFunc)>main}{
\par }{\cs26\uldb GetNaturalItemIID}{\cs28\v\cf2 ICollection_GetNaturalItemIID>main}{
\par }{\cs26\uldb GetNaturalItemsOnly}{\cs28\v\cf2 ICollection_GetNaturalItemsOnly>main}{
\par }{\cs26\uldb GetSize}{\cs28\v\cf2 ICollection_GetSize>main}{
\par }{\cs26\uldb GetType}{\cs28\v\cf2 ICollection_GetType>main}{
\par }{\cs26\uldb IsEmpty}{\cs28\v\cf2 ICollection_IsEmpty>main}{
\par }{\cs26\uldb ItemAllowed}{\cs28\v\cf2 ICollection_ItemAllowed>main}{
\par }{\cs26\uldb ItemCount(Array)}{\cs28\v\cf2 ICollection_ItemCount(Array)>main}{
\par }{\cs26\uldb ItemCount(ICollection)}{\cs28\v\cf2 ICollection_ItemCount(ICollection)>main}{
\par }{\cs26\uldb ItemCount(Item)}{\cs28\v\cf2 ICollection_ItemCount(Item)>main}{
\par }{\cs26\uldb IsNaturalItem}{\cs28\v\cf2 ICollection_IsNaturalItem>main}{
\par }{\cs26\uldb Matching(ICollection)}{\cs28\v\cf2 ICollection_Matching(ICollection)>main}{
\par }{\cs26\uldb Matching(Array)}{\cs28\v\cf2 ICollection_Matching(Array)>main}{
\par }{\cs26\uldb Remove(ICollection)}{\cs28\v\cf2 ICollection_Remove(ICollection)>main}{
\par }{\cs26\uldb Remove(Item)}{\cs28\v\cf2 ICollection_Remove(Item)>main}{
\par }{\cs26\uldb Remove(Array)}{\cs28\v\cf2 ICollection_Remove(Array)>main}{
\par }{\cs26\uldb RemoveAll(ICollection)}{\cs28\v\cf2 ICollection_RemoveAll(ICollection)>main}{
\par }{\cs26\uldb RemoveAll(Item)}{\cs28\v\cf2 ICollection_RemoveAll(Item)>main}{
\par }{\cs26\uldb RemoveAll(Array)}{\cs28\v\cf2 ICollection_RemoveAll(Array)>main}{
\par }{\cs26\uldb Retain(ICollection)}{\cs28\v\cf2 ICollection_Retain(ICollection)>main}{
\par }{\cs26\uldb Retain(Array)}{\cs28\v\cf2 ICollection_Retain(Array)>main}{
\par }{\cs26\uldb SetCapacity}{\cs28\v\cf2 ICollection_SetCapacity>main}{
\par }{\cs26\uldb SetComparator}{\cs28\v\cf2 ICollection_SetComparator>main}{
\par }{\cs26\uldb SetIgnoreErrors}{\cs28\v\cf2 ICollection_SetIgnoreErrors>main}{
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Derived from IUnknown
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {QueryInterface
\par AddRef
\par Release
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Methods_Alpha}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Methods}}}{IMap methods
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap>main}{        }{\cs17\fs16\uldb By object}{\cs24\v\fs16\cf2 IMap_Methods_ByObj}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }{\cs26\uldb Add(ICollection)}{\cs28\v\cf2 ICollection_Add(ICollection)>main}{
\par }{\cs26\uldb Add(Item)}{\cs28\v\cf2 ICollection_Add(Item)>main}{
\par }{\cs26\uldb Add(Array)}{\cs28\v\cf2 ICollection_Add(Array)>main}{
\par AddRef
\par }{\cs26\uldb Clear}{\cs28\v\cf2 ICollection_Clear>main}{
\par }{\cs26\uldb Clone}{\cs28\v\cf2 ICollection_Clone>main}{
\par }{\cs26\uldb CloneAsMap}{\cs28\v\cf2 IMap_CloneAsMap>main}{
\par }{\cs26\uldb Contains(ICollection)}{\cs28\v\cf2 ICollection_Contains(ICollection)>main}{
\par }{\cs26\uldb Contains(Item)}{\cs28\v\cf2 ICollection_Contains(Item)>main}{
\par }{\cs26\uldb Contains(Array)}{\cs28\v\cf2 ICollection_Contains(Array)>main}{
\par }{\cs26\uldb ContainsKey(ICollection)}{\cs28\v\cf2 IMap_ContainsKey(ICollection)>main}{
\par }{\cs26\uldb ContainsKey(Key)}{\cs28\v\cf2 IMap_ContainsKey(Key)>main}{
\par }{\cs26\uldb ContainsKey(Array)}{\cs28\v\cf2 IMap_ContainsKey(Array)>main}{
\par }{\cs26\uldb Equals}{\cs28\v\cf2 ICollection_Equals>main}{
\par }{\cs26\uldb Find(Filter)}{\cs28\v\cf2 ICollection_Find(Filter)>main}{
\par }{\cs26\uldb Find(FilterFunc)}{\cs28\v\cf2 ICollection_Find(FilterFunc)>main}{
\par }{\cs26\uldb FindAll(Filter)}{\cs28\v\cf2 ICollection_FindAll(Filter)>main}{
\par }{\cs26\uldb FindAll(FilterFunc)}{\cs28\v\cf2 ICollection_FindAll(FilterFunc)>main}{
\par }{\cs26\uldb Get}{\cs28\v\cf2 IMap_Get>main}{
\par }{\cs26\uldb GetAsArray}{\cs28\v\cf2 ICollection_GetAsArray>main}{
\par }{\cs26\uldb GetCapacity}{\cs28\v\cf2 ICollection_GetCapacity>main}{
\par }{\cs26\uldb GetComparator}{\cs28\v\cf2 ICollection_GetComparator>main}{
\par }{\cs26\uldb GetDuplicates}{\cs28\v\cf2 ICollection_GetDuplicates>main}{
\par }{\cs26\uldb GetFixedSize}{\cs28\v\cf2 ICollection_GetFixedSize>main}{
\par }{\cs26\uldb GetKeyComparator}{\cs28\v\cf2 IMap_GetKeyComparator>main}{
\par }{\cs26\uldb GetKeyIterator}{\cs28\v\cf2 IMap_GetKeyIterator>main}{
\par }{\cs26\uldb GetKeys}{\cs28\v\cf2 IMap_GetKeys>main}{
\par }{\cs26\uldb GetIgnoreErrors}{\cs28\v\cf2 ICollection_GetIgnoreErrors>main}{
\par }{\cs26\uldb GetInstance}{\cs28\v\cf2 ICollection_GetInstance>main}{
\par }{\cs26\uldb GetIterator}{\cs28\v\cf2 ICollection_GetIterator>main}{
\par }{\cs26\uldb GetIterator(Filter)}{\cs28\v\cf2 ICollection_GetIterator(Filter)>main}{
\par }{\cs26\uldb GetIterator(FilterFunc)}{\cs28\v\cf2 ICollection_GetIterator(FilterFunc)>main}{
\par }{\cs26\uldb GetMapIterator}{\cs28\v\cf2 IMap_GetMapIterator>main}{
\par }{\cs26\uldb GetMapIteratorByKey(Filter)}{\cs28\v\cf2 IMap_GetMapIteratorByKey(Filter)>main}{
\par }{\cs26\uldb GetMapIteratorByKey(FilterFunc)}{\cs28\v\cf2 IMap_GetMapIteratorByKey(FilterFunc)>main}{
\par }{\cs26\uldb GetNaturalItemIID}{\cs28\v\cf2 ICollection_GetNaturalItemIID>main}{
\par }{\cs26\uldb GetNaturalItemsOnly}{\cs28\v\cf2 ICollection_GetNaturalItemsOnly>main}{
\par }{\cs26\uldb GetNaturalKeyIID}{\cs28\v\cf2 IMap_GetNaturalKeyIID>main}{
\par }{\cs26\uldb GetNaturalKeysOnly}{\cs28\v\cf2 IMap_GetNaturalKeysOnly>main}{
\par }{\cs26\uldb GetSize}{\cs28\v\cf2 ICollection_GetSize>main}{
\par }{\cs26\uldb GetType}{\cs28\v\cf2 ICollection_GetType>main}{
\par }{\cs26\uldb GetValues}{\cs28\v\cf2 IMap_GetValues>main}{
\par }{\cs26\uldb IsEmpty}{\cs28\v\cf2 ICollection_IsEmpty>main}{
\par }{\cs26\uldb ItemAllowed}{\cs28\v\cf2 ICollection_ItemAllowed>main}{
\par }{\cs26\uldb ItemCount(Array)}{\cs28\v\cf2 ICollection_ItemCount(Array)>main}{
\par }{\cs26\uldb ItemCount(ICollection)}{\cs28\v\cf2 ICollection_ItemCount(ICollection)>main}{
\par }{\cs26\uldb ItemCount(Item)}{\cs28\v\cf2 ICollection_ItemCount(Item)>main}{
\par }{\cs26\uldb IsNaturalItem}{\cs28\v\cf2 ICollection_IsNaturalItem>main}{
\par }{\cs26\uldb IsKeyAllowed}{\cs28\v\cf2 IMap_IsKeyAllowed>main}{
\par }{\cs26\uldb Matching(ICollection)}{\cs28\v\cf2 ICollection_Matching(ICollection)>main}{
\par }{\cs26\uldb Matching(Array)}{\cs28\v\cf2 ICollection_Matching(Array)>main}{
\par }{\cs26\uldb MatchingKey(ICollection)}{\cs28\v\cf2 IMap_MatchingKey(ICollection)>main}{
\par }{\cs26\uldb MatchingKey(Array)}{\cs28\v\cf2 IMap_MatchingKey(Array)>main}{
\par }{\cs26\uldb Put(ICollection)}{\cs28\v\cf2 IMap_Put(ICollection)>main}{
\par }{\cs26\uldb Put(IMap)}{\cs28\v\cf2 IMap_Put(IMap)>main}{
\par }{\cs26\uldb Put(Item)}{\cs28\v\cf2 IMap_Put(Item)>main}{
\par }{\cs26\uldb Put(Key, Item)}{\cs28\v\cf2 IMap_Put(Key, Item)>main}{
\par }{\cs26\uldb Put(Array)}{\cs28\v\cf2 IMap_Put(Array)>main}{
\par QueryInterface
\par Release
\par }{\cs26\uldb Remove(ICollection)}{\cs28\v\cf2 ICollection_Remove(ICollection)>main}{
\par }{\cs26\uldb Remove(Item)}{\cs28\v\cf2 ICollection_Remove(Item)>main}{
\par }{\cs26\uldb Remove(Array)}{\cs28\v\cf2 ICollection_Remove(Array)>main}{
\par }{\cs26\uldb RemoveAll(ICollection)}{\cs28\v\cf2 ICollection_RemoveAll(ICollection)>main}{
\par }{\cs26\uldb RemoveAll(Item)}{\cs28\v\cf2 ICollection_RemoveAll(Item)>main}{
\par }{\cs26\uldb RemoveAll(Array)}{\cs28\v\cf2 ICollection_RemoveAll(Array)>main}{
\par }{\cs26\uldb RemoveKey(ICollection)}{\cs28\v\cf2 IMap_RemoveKey(ICollection)>main}{
\par }{\cs26\uldb RemoveKey(Key)}{\cs28\v\cf2 IMap_RemoveKey(Key)>main}{
\par }{\cs26\uldb RemoveKey(Array)}{\cs28\v\cf2 IMap_RemoveKey(Array)>main}{
\par }{\cs26\uldb Retain(ICollection)}{\cs28\v\cf2 ICollection_Retain(ICollection)>main}{
\par }{\cs26\uldb Retain(Array)}{\cs28\v\cf2 ICollection_Retain(Array)>main}{
\par }{\cs26\uldb RetainKey(ICollection)}{\cs28\v\cf2 IMap_RetainKey(ICollection)>main}{
\par }{\cs26\uldb RetainKey(Array)}{\cs28\v\cf2 IMap_RetainKey(Array)>main}{
\par }{\cs26\uldb SetCapacity}{\cs28\v\cf2 ICollection_SetCapacity>main}{
\par }{\cs26\uldb SetComparator}{\cs28\v\cf2 ICollection_SetComparator>main}{
\par }{\cs26\uldb SetIgnoreErrors}{\cs28\v\cf2 ICollection_SetIgnoreErrors>main}{
\par }{\cs26\uldb SetKeyComparator}{\cs28\v\cf2 IMap_SetKeyComparator>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_CloneAsMap}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap CloneAsMap}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ CloneAsMap}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_CloneAsMap}}}{IMap.CloneAsMap
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Creates duplicate of map.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  CloneAsMap: }{\cs31\f2\uldb IMap}{\cs30\v\f2\cf2 IMap}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns a shallow copy of collection containing current items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_ContainsKey(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap ContainsKey(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 ContainsKey;ContainsKey(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ContainsKey}}}{IMap.ContainsKey(ICollection)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether all supplied keys are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  ContainsKey(}{\cs29\b\f2 const}{\cs22\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns true if all supplied keys are found in collection according to the key comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_ContainsKey(Key)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap ContainsKey(Key)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ContainsKey;ContainsKey(Key)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ContainsKey}}}{IMap.ContainsKey(Key)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether collection contains key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  ContainsKey(}{\cs29\b\f2 const}{\cs22\f2  Key: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection contains any item associated with key.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_ContainsKey(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap ContainsKey(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ContainsKey;ContainsKey(Array)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ContainsKey}}}{IMap.ContainsKey(Array)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether all supplied keys are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  ContainsKey(}{\cs29\b\f2 const}{\cs22\f2  ItemArray: }{\cs29\b\f2 array of}{\cs22\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs22\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns true if all supplied keys are found in collection according to the key comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Get}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Get}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Get}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Get}}}{IMap.Get
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Retrieves item using key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Get(}{\cs29\b\f2 const}{\cs22\f2  Key: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): }{\cs31\f2\uldb ICollectable}{
\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns item associated with key or nil if no such item exists.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetKeyComparator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetKeyComparator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetKeyComparator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetKeyComparator}}}{IMap.GetKeyComparator
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns comparator used to compare keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetKeyComparator: }{\cs31\f2\uldb IComparator}{\cs30\v\f2\cf2 IComparator}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns comparator used to compare keys.  This can diffe
r from the collection comparator as keys and values are usually different datatypes or natural keys are used but not natural items.  By default, returns an instance of TDefaultComparator for non-natural keys and TNaturalComparator for natural keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetKeyIterator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetKeyIterator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetKeyIterator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetKeyIterator}}}{IMap.GetKeyIterator
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator for keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetKeyIterator: }{\cs31\f2\uldb IIterator}{\cs30\v\f2\cf2 IIterator}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every key in sequence.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetKeys}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetKeys}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetKeys}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetKeys}}}{IMap.GetKeys
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns keys in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetKeys: }{\cs31\f2\uldb ISet}{\cs30\v\f2\cf2 ISet}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns all keys found in collection as a set.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetMapIterator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetMapIterator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetMapIterator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetMapIterator}}}{IMap.GetMapIterator
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator for key-value pairs.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetMapIterator: }{\cs31\f2\uldb IMapIterator}{\cs30\v\f2\cf2 IMapIterator}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every key and item in sequence.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetMapIteratorByKey(Filter)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetMapIteratorByKey(Filter)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 GetMapIteratorByKey;GetMapIteratorByKey(Filter)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetMapIteratorByKey}}}{IMap.GetMapIteratorByKey(Filter)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator for key-value pairs filtered by key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetMapIteratorByKey(}{\cs29\b\f2 const}{\cs22\f2  Filter: }{\cs31\f2\uldb IFilter}{\cs30\v\f2\cf2 IFilter}{\cs22\f2 ): }{\cs31\f2\uldb IMapIterator}{
\cs30\v\f2\cf2 IMapIterator}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every key and item in sequence where the key is accepted by }{\i Filter}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetMapIteratorByKey(FilterFunc)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetMapIteratorByKey(FilterFunc)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 GetMapIteratorByKey;GetMapIteratorByKey(FilterFunc)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetMapIteratorByKey}}}{IMap.GetMapIteratorByKey(FilterFunc)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator for key-value pairs filtered by key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetMapIteratorByKey(FilterFunc: }{\cs31\f2\uldb TCollectionFilterFunc}{\cs30\v\f2\cf2 TCollectionFilterFunc}{\cs22\f2 ): }{\cs31\f2\uldb IMapIterator}{
\cs30\v\f2\cf2 IMapIterator}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every key and item in sequence where the key is accepted by }{\i FilterFunc}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetNaturalKeyIID}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetNaturalKeyIID}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetNaturalKeyIID}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetNaturalKeyIID}}}{IMap.GetNaturalKeyIID
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns id of interface that must be implemented by natural keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetNaturalKeyIID: TGUID;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns identifier of interface (IID) that must be implemented by keys to 
be considered natural by this type of collection.  This is only relevent for natural key collections.  This is usually equal to constant }{\i EquatableIID}{, corresponding to the interface }{\cs26\uldb Iequatable}{\cs28\v\cf2 IEquatable}{
, though some implementations return }{\i ComparableIIID}{ for }{\cs26\uldb IComparable}{\cs28\v\cf2 IComparable}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetNaturalKeysOnly}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetNaturalKeysOnly}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetNaturalKeysOnly}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetNaturalKeysOnly}}}{IMap.GetNaturalKeysOnly
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether collection only accepts natural keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetNaturalKeysOnly: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection is a natural key collection and can only accept natural keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_GetValues}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap GetValues}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetValues}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_GetValues}}}{IMap.GetValues
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns items in collection as a set.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  GetValues: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns all items in collection.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_IsKeyAllowed}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap IsKeyAllowed}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IsKeyAllowed}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_IsKeyAllowed}}}{IMap.IsKeyAllowed
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether key can be in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  IsKeyAllowed(}{\cs29\b\f2 const}{\cs22\f2  Key: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection is non-natural key (and can accept any key) or key is natural.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_MatchingKey(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap MatchingKey(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 MatchingKey;MatchingKey(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ MatchingKey}}}{IMap.MatchingKey(ICollection)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Finds which supplied keys are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  MatchingKey(}{\cs29\b\f2 const}{\cs22\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ): }{\cs31\f2\uldb ICollection}
{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns collection of supplied keys that can be found in collection, according to collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_MatchingKey(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap MatchingKey(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ MatchingKey;MatchingKey(Array)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_MatchingKey}}}{IMap.MatchingKey(Array)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Finds which supplied keys are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  MatchingKey(}{\cs29\b\f2 const}{\cs22\f2  ItemArray: }{\cs29\b\f2 array of}{\cs22\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs22\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns collection of supplied keys that can be found in collection, according to collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Put(ICollection)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Put(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Put;Put(ICollection)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Put}}}{IMap.Put(ICollection)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all supplied, natural items at their key position, replacing any existing items.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Put(}{\cs29\b\f2 const}{\cs22\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ): }{\cs31\f2\uldb ICollection}{
\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all natural items with their keys, replacing any existing items with the same key.  Returns any items that were replaced.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 
ECollectionError}{ if any item is non-natural.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Put(IMap)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Put(IMap)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Put;Put(IMap)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Put}}}{IMap.Put(IMap)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all supplied items at their key positions, replacing any existing items there.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Put(}{\cs29\b\f2 const}{\cs22\f2  Map: }{\cs31\f2\uldb IMap}{\cs30\v\f2\cf2 IMap}{\cs22\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{
\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all items with their associated keys, replacing any existing items with the same key. Returns any items that were replaced.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 
ECollectionError}{ if item is non-natural and collection is natural, or key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Put(Item)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Put(Item)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Put;Put(Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Put}}}{IMap.Put(Item)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds natural item at its key position, replacing any existing item there.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Put(}{\cs29\b\f2 const}{\cs22\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): }{\cs31\f2\uldb ICollectable}{
\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds natural item with its key, replacing any existing item with the same key.  Returns the item that was replaced, if any, otherwise nil.  Throws }{\cs26\uldb ECollectionError}{
\cs28\v\cf2 ECollectionError}{ if item is non-natural.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Put(Key, Item)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Put(Key, Item)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Put;Put(Key, Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_Put}}}{IMap.Put(Key, Item)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds item at key position, replacing any existing item there.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Put(}{\cs29\b\f2 const}{\cs22\f2  Key, Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): }{\cs31\f2\uldb ICollectable}{
\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds item with associated key (ignoring the item\rquote 
s key if it is natural), replacing any existing item with the same key.  Returns the item that was replaced, if any, otherwise nil.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{ if item is non-natural and collect
ion is natural, or key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_Put(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap Put(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Put;Put(Array)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ Put}}}{IMap.Put(Array)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all supplied items at their key positions, replacing any existing items there.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  Put(}{\cs29\b\f2 const}{\cs22\f2  ItemArray: }{\cs29\b\f2 array of}{\cs22\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): }{
\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds all items with their associated keys, replacing any existing items with the same key.  Returns any items that were replaced.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 
ECollectionError}{ if any item is non-natural or any key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_RemoveKey(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap RemoveKey(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 RemoveKey;RemoveKey(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_RemoveKey}}}{IMap.RemoveKey(ICollection)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items with supplied keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  RemoveKey(}{\cs29\b\f2 const}{\cs22\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ): }{\cs31\f2\uldb ICollection}{
\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items associated with supplied keys.  Returns all items that were removed.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{
 if any key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_RemoveKey(Key)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap RemoveKey(Key)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ RemoveKey;RemoveKey(Key)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_ RemoveKey}}}{IMap.RemoveKey(Key)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes item associated with supplied key.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  RemoveKey(}{\cs29\b\f2 const}{\cs22\f2  Key: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ): }{\cs31\f2\uldb ICollectable}{
\cs30\v\f2\cf2 ICollectable}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes item associated with key. This can fail if:-
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Collection is of fixed size.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Key is non-natural and collection is natural-key.
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par Returns removed item, if any, otherwise nil.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{ if key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_RemoveKey(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap RemoveKey(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ RemoveKey;RemoveKey(Array)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_RemoveKey}}}{IMap.RemoveKey(Array)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items with supplied keys.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  RemoveKey(}{\cs29\b\f2 const}{\cs22\f2  ItemArray: }{\cs29\b\f2 array of}{\cs22\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs22\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items associated with supplied keys.  Returns all items that were removed.  Throws }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{
 if any key is non-natural and collection is natural-keys.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_RetainKey(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap RetainKey(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 RetainKey;RetainKey(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_RetainKey(ICollection)}}}{IMap.RetainKey(ICollection)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Keeps items in collection associated with keys that are found in parameter.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  RetainKey(}{\cs29\b\f2 const}{\cs22\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ): }{\cs31\f2\uldb ICollection}{
\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection except those with keys that match any key in supplied collection, according to collection comparator.
\par 
\par Returns all items that were removed.  Can throw }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_RetainKey(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap RetainKey(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ RetainKey;RetainKey(Array)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_RetainKey}}}{IMap.RetainKey(Array)
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Keeps items in collection associated with keys that are found in parameter.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs22\f2  RetainKey(}{\cs29\b\f2 const}{\cs22\f2  ItemArray: }{\cs29\b\f2 array of}{\cs22\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs22\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs22\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection except those with keys that match any key in supplied array, according to collection comparator.  See }{\cs26\uldb RemoveKey}{\cs28\v\cf2 
IMap_RemoveKey(Key)}{ for reasons why items can be rejected.
\par 
\par Returns all items that were removed.  Can throw }{\cs26\uldb ECollectionError}{\cs28\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ IMap_SetKeyComparator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ IMap SetKeyComparator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ SetKeyComparator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ IMap_SetKeyComparator}}}{IMap.SetKeyComparator
\par }\pard\plain \s27\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb IMap}{\cs24\v\fs16\cf2 IMap}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets key comparator.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 procedure}{\cs22\f2  SetKeyComparator(}{\cs29\b\f2 const}{\cs22\f2  Comparator: }{\cs31\f2\uldb IComparator}{\cs30\v\f2\cf2 IComparator}{\cs22\f2 );
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets key comparator.  If parameter is nil, comparator reverts to default comparator for collection(}{\cs26\uldb TDefaultComparator}{\cs28\v\cf2 TDefaultComparator}{
 for non-natural-key collections and }{\cs26\uldb TNaturalComparator}{\cs28\v\cf2 TNaturalComparator}{ for natural-key collections).
\par 
\par }}