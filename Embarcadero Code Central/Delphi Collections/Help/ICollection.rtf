{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times{\*\falt Times New Roman};}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica{\*\falt Arial};}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier{\*\falt Courier New};}
{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva{\*\falt Arial};}{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn{\*\falt Times New Roman};}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv{\*\falt Arial};}
{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York{\*\falt Times New Roman};}
{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}
{\f16\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f17\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f18\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 10 Pitch;}
{\f19\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 20 Pitch;}{\f20\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 5 Pitch;}{\f21\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 12 Pitch;}
{\f22\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 24 Pitch;}{\f23\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic 6 Pitch;}{\f24\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier 16.67 Pitch;}
{\f25\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times{\*\falt Times New Roman};}{\f26\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers;}{\f27\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}
{\f28\fswiss\fcharset0\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f29\fscript\fcharset0\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f30\fswiss\fcharset0\fprq2{\*\panose 020b0602030504090204}Lucida Sans;}
{\f31\fswiss\fcharset0\fprq2{\*\panose 020b0602030504020204}Lucida Sans Unicode;}{\f32\froman\fcharset0\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f33\fswiss\fcharset0\fprq2{\*\panose 020b0502020202020204}Century Gothic;}
{\f34\fmodern\fcharset0\fprq1{\*\panose 02010509020102010303}OCR A Extended;}{\f35\froman\fcharset0\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f36\fswiss\fcharset0\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}
{\f37\fswiss\fcharset0\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f38\fswiss\fcharset0\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f39\fdecor\fcharset0\fprq2{\*\panose 04040403030d02020704}Matisse ITC;}
{\f40\fdecor\fcharset0\fprq2{\*\panose 04020404030d07020202}Tempus Sans ITC;}{\f41\fdecor\fcharset0\fprq2{\*\panose 04040506030f02020702}Westminster;}{\f42\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}
{\f43\froman\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f44\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Int A;}{\f45\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Int B;}
{\f46\fmodern\fcharset2\fprq1{\*\panose 00000000000000000000}LotusWP Box;}{\f47\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Type;}{\f48\froman\fcharset0\fprq2{\*\panose 00000000000000000000}LotusWP Icon;}
{\f49\froman\fcharset2\fprq2{\*\panose 00000000000000000000}Math A;}{\f50\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Math B;}{\f51\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Math C;}
{\f52\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode;}{\f53\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f54\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Baskerville;}
{\f55\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Binner Gothic;}{\f56\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Centaur;}{\f57\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}
{\f58\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans;}{\f59\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans Condensed;}{\f60\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Gill Sans Ultra Bold;}
{\f61\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Letter Gothic;}{\f62\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}News Gothic;}{\f63\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Nimrod;}
{\f64\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Onyx;}{\f65\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Botanical;}{\f66\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell;}
{\f67\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell Condensed;}{\f68\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Rockwell Light;}{\f69\fscript\fcharset0\fprq2{\*\panose 00000000000000000000}Brush Script;}
{\f70\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Perpetua;}{\f71\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Lydian;}{\f72\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}News Gothic Condensed;}
{\f73\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Photina Casual Black;}{\f74\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Abadi MT Condensed Extra Bold;}
{\f75\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT;}{\f76\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Arial Rounded MT Bold;}{\f77\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Verdana Ref;}
{\f78\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}MagicSymbols;}{\f79\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Gamekeys MT;}{\f80\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Microsoft Logo 95;}
{\f81\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}SWlogo;}{\f82\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers Condensed;}{\f83\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol;}
{\f84\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f85\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f86\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Trebuchet MS;}
{\f87\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f88\fnil\fcharset0\fprq2{\*\panose 00000000000000000000}Agency FB;}{\f89\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David;}
{\f90\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}David Transparent;}{\f91\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam;}{\f92\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Miriam Fixed;}
{\f93\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Fixed Miriam Transparent;}{\f94\fnil\fcharset177\fprq2{\*\panose 00000000000000000000}Miriam Transparent;}{\f95\fmodern\fcharset177\fprq1{\*\panose 00000000000000000000}Rod;}
{\f96\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MS Reference 1;}{\f97\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}MS Reference 2;}
{\f98\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Microstyle Bold Extended ATT Tu{\*\falt Times New Roman};}{\f99\froman\fcharset0\fprq0{\*\panose 00000000000000000000}(normal text);}
{\f100\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}News Gothic MT CE;}{\f101\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}News Gothic MT Greek;}{\f102\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}News Gothic MT Tur;}
{\f103\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}News Gothic MT Baltic;}{\f104\fscript\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Handwriting CE;}
{\f105\fscript\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Greek;}{\f106\fscript\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Tur;}
{\f107\fscript\fcharset186\fprq2{\*\panose 00000000000000000000}Lucida Handwriting Baltic;}{\f108\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Lucida Sans CE;}{\f109\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Lucida Sans Greek;}
{\f110\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Lucida Sans Tur;}{\f111\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Lucida Sans Baltic;}{\f112\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Int A CE;}
{\f113\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Int A Greek;}{\f114\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Int A Tur;}{\f115\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Int A Baltic;}
{\f116\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Int B CE;}{\f117\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Int B Greek;}{\f118\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Int B Tur;}
{\f119\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Int B Baltic;}{\f120\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Type CE;}{\f121\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Type Greek;}
{\f122\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Type Tur;}{\f123\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Type Baltic;}{\f124\froman\fcharset238\fprq2{\*\panose 00000000000000000000}LotusWP Icon CE;}
{\f125\froman\fcharset161\fprq2{\*\panose 00000000000000000000}LotusWP Icon Greek;}{\f126\froman\fcharset162\fprq2{\*\panose 00000000000000000000}LotusWP Icon Tur;}{\f127\froman\fcharset186\fprq2{\*\panose 00000000000000000000}LotusWP Icon Baltic;}
{\f128\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode CE;}{\f129\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Greek;}
{\f130\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Tur;}{\f131\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}Lotus Postal Barcode Baltic;}{\f132\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell CE;}
{\f133\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Greek;}{\f134\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Baltic;}{\f135\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell Condensed CE;}
{\f136\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Greek;}{\f137\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Baltic;}
{\f138\froman\fcharset238\fprq2{\*\panose 00000000000000000000}Rockwell Light CE;}{\f139\froman\fcharset161\fprq2{\*\panose 00000000000000000000}Rockwell Light Greek;}{\f140\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Light Tur;}
{\f141\froman\fcharset186\fprq2{\*\panose 00000000000000000000}Rockwell Light Baltic;}{\f142\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}MagicSymbols CE;}{\f143\fnil\fcharset204\fprq2{\*\panose 00000000000000000000}MagicSymbols Cyr;}
{\f144\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}MagicSymbols Greek;}{\f145\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}MagicSymbols Tur;}{\f146\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}MagicSymbols Baltic;}
{\f147\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}SWlogo CE;}{\f148\fnil\fcharset161\fprq2{\*\panose 00000000000000000000}SWlogo Greek;}{\f149\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}SWlogo Tur;}
{\f150\fnil\fcharset186\fprq2{\*\panose 00000000000000000000}SWlogo Baltic;}{\f151\fnil\fcharset238\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol CE;}{\f152\fnil\fcharset162\fprq2{\*\panose 00000000000000000000}Attica IAGB3 Symbol Tur;}
{\f153\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Univers CE;}{\f154\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Univers Tur;}{\f155\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Tur;}
{\f156\froman\fcharset162\fprq2{\*\panose 00000000000000000000}Rockwell Condensed Tur;}{\f157\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Verdana Ref CE;}{\f158\fswiss\fcharset204\fprq2{\*\panose 00000000000000000000}Verdana Ref Cyr;}
{\f159\fswiss\fcharset161\fprq2{\*\panose 00000000000000000000}Verdana Ref Greek;}{\f160\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Verdana Ref Tur;}{\f161\fswiss\fcharset186\fprq2{\*\panose 00000000000000000000}Verdana Ref Baltic;}
{\f162\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Univers Condensed CE;}{\f163\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Univers Condensed Tur;}{\f164\fswiss\fcharset238\fprq2{\*\panose 00000000000000000000}Trebuchet MS CE;}
{\f165\fswiss\fcharset162\fprq2{\*\panose 00000000000000000000}Trebuchet MS Tur;}{\f166\froman\fcharset238\fprq2 Times New Roman CE;}{\f167\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f169\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f170\froman\fcharset162\fprq2 Times New Roman Tur;}{\f171\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f172\fswiss\fcharset238\fprq2 Arial CE;}{\f173\fswiss\fcharset204\fprq2 Arial Cyr;}{\f175\fswiss\fcharset161\fprq2 Arial Greek;}
{\f176\fswiss\fcharset162\fprq2 Arial Tur;}{\f177\fswiss\fcharset186\fprq2 Arial Baltic;}{\f178\fmodern\fcharset238\fprq1 Courier New CE;}{\f179\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f181\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f182\fmodern\fcharset162\fprq1 Courier New Tur;}{\f183\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f256\fswiss\fcharset238\fprq2 Tahoma CE;}{\f257\fswiss\fcharset204\fprq2 Tahoma Cyr;}{\f259\fswiss\fcharset161\fprq2 Tahoma Greek;}
{\f260\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f261\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f268\fswiss\fcharset238\fprq2 Arial Black CE;}{\f269\fswiss\fcharset204\fprq2 Arial Black Cyr;}{\f271\fswiss\fcharset161\fprq2 Arial Black Greek;}
{\f272\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f273\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f352\fswiss\fcharset238\fprq2 Lucida Sans Unicode CE;}{\f353\fswiss\fcharset204\fprq2 Lucida Sans Unicode Cyr;}
{\f355\fswiss\fcharset161\fprq2 Lucida Sans Unicode Greek;}{\f356\fswiss\fcharset162\fprq2 Lucida Sans Unicode Tur;}{\f358\froman\fcharset238\fprq2 Book Antiqua CE;}{\f359\froman\fcharset204\fprq2 Book Antiqua Cyr;}
{\f361\froman\fcharset161\fprq2 Book Antiqua Greek;}{\f362\froman\fcharset162\fprq2 Book Antiqua Tur;}{\f363\froman\fcharset186\fprq2 Book Antiqua Baltic;}{\f364\fswiss\fcharset238\fprq2 Century Gothic CE;}
{\f365\fswiss\fcharset204\fprq2 Century Gothic Cyr;}{\f367\fswiss\fcharset161\fprq2 Century Gothic Greek;}{\f368\fswiss\fcharset162\fprq2 Century Gothic Tur;}{\f369\fswiss\fcharset186\fprq2 Century Gothic Baltic;}
{\f418\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f419\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f421\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f422\fmodern\fcharset162\fprq1 Lucida Console Tur;}
{\f484\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f485\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}{\f487\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f488\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f489\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}
{\f508\froman\fcharset238\fprq2 Garamond CE;}{\f509\froman\fcharset204\fprq2 Garamond Cyr;}{\f511\froman\fcharset161\fprq2 Garamond Greek;}{\f512\froman\fcharset162\fprq2 Garamond Tur;}{\f513\froman\fcharset186\fprq2 Garamond Baltic;}
{\f670\fscript\fcharset238\fprq2 Comic Sans MS CE;}{\f671\fscript\fcharset204\fprq2 Comic Sans MS Cyr;}{\f673\fscript\fcharset161\fprq2 Comic Sans MS Greek;}{\f674\fscript\fcharset162\fprq2 Comic Sans MS Tur;}
{\f675\fscript\fcharset186\fprq2 Comic Sans MS Baltic;}{\f676\fswiss\fcharset238\fprq2 Impact CE;}{\f677\fswiss\fcharset204\fprq2 Impact Cyr;}{\f679\fswiss\fcharset161\fprq2 Impact Greek;}{\f680\fswiss\fcharset162\fprq2 Impact Tur;}
{\f681\fswiss\fcharset186\fprq2 Impact Baltic;}{\f688\fswiss\fcharset238\fprq2 Verdana CE;}{\f689\fswiss\fcharset204\fprq2 Verdana Cyr;}{\f691\fswiss\fcharset161\fprq2 Verdana Greek;}{\f692\fswiss\fcharset162\fprq2 Verdana Tur;}
{\f693\fswiss\fcharset186\fprq2 Verdana Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid 
\snext0 Normal;}{\s1\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext15 
footnote text;}{\s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid \sbasedon0 \snext26 Topic Title;}{\*\cs17 \additive \f1\fs16\uldb \sbasedon10 SmallWindowLink Display;}{\s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid 
\sbasedon0 \snext0 Heading;}{\*\cs19 \additive \super \sbasedon10 footnote reference;}{\s20\nowidctlpar\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 header;}{\s21\nowidctlpar\widctlpar
\tqc\tx4153\tqr\tx8306\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext21 footer;}{\*\cs22 \additive \f1\fs16\ul \sbasedon17 SmallPopupLink Display;}{\*\cs23 \additive \v\f1\fs16\cf2 \sbasedon10 SmallWindowLink Data;}{\*\cs24 \additive 
\v\f1\fs16\ul\cf2 \sbasedon22 SmallPopupLink Data;}{\*\cs25 \additive \f1\fs20\uldb \sbasedon10 WindowLink Display;}{\s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid \sbasedon0 \snext0 NonScrollable;}{\*\cs27 \additive \v\f1\fs20\cf2 
\sbasedon10 WindowLink Data;}{\*\cs28 \additive \f2\fs20 \sbasedon10 Code;}{\*\cs29 \additive \b\f2\fs20 \sbasedon10 Code Keyword;}{\*\cs30 \additive \v\f2\fs20\cf2 \sbasedon10 Code WindowLink Data;}{\*\cs31 \additive \f2\fs20\uldb \sbasedon10 
Code WindowLink Display;}}{\*\listtable{\list\listtemplateid134807553\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }
{\listname ;}\listid148331751}}{\*\listoverridetable{\listoverride\listid148331751\listoverridecount0\ls1}}{\*\revtbl {Unknown;}}{\info{\title Classname}{\author Matthew Greet}{\operator Matthew Greet}{\creatim\yr2003\mo1\dy21\hr17\min50}{\revtim\yr2004\mo5\dy31\hr19\min19}
{\version310}{\edmins607}{\nofpages61}{\nofwords3902}{\nofchars22242}{\*\company  }{\nofcharsws0}{\vern71}}\paperw28350\paperh28350\margl0\margr0\margt0\margb0 \widowctrl\ftnbj\aenddoc\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0
{\*\template D:\\Projects\\WinHelp Templates\\Working\\Delphi Interface.dot}{\*\ftnsep \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsep 
\par }}{\*\ftnsepc \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\chftnsepc 
\par }}{\*\ftncn \pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }}\sectd \psz9\linex0\headery0\footery0\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {
\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection interface}
}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ICollection;Collection}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection}}}{
ICollection}{\cs23 
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs22\fs16\ul Hierarchy}{\cs24\v\fs16\ul\cf2 ICollection_Hierarchy}{        }{\cs17\fs16\uldb Properties}{\cs23\v\fs16\cf2 ICollection_Properties_ByObj>Inspect}{        }{
\cs17\fs16\uldb Methods}{\cs23\v\fs16\cf2 ICollection_Methods_ByObj >Inspect}{\cs17\fs16\uldb 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Defines the various addition, removal and search functions common to all collections.
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Unit
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Collections
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {This interface declares that the implementing class i
s a collection and can refer to any number of objects.  It defines the methods that can be applied to an abstract collection such as adding and removing items, retrieving and cloning.  Certain methods may throw an }{\cs25\uldb ECollectionError}{
\cs27\v\cf2 ECollectionError}{ or be ignored if the implementing collection cannot allow it.  For example, }{\i Add}{ can fail if the collection does not allow duplicates or only accepts natural items.
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Known implementing classes
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs25\uldb TAbstractCollection}{\cs27\v\cf2 TAbstractCollection}{, }{\cs25\uldb TAbstractBag}{\cs27\v\cf2 TAbstractBag}{, }{\cs25\uldb TAbstractSet}{\cs27\v\cf2 TAbstractSet}{, }{
\cs25\uldb TAbstractList}{\cs27\v\cf2 TAbstractList}{, }{\cs25\uldb TAbstractMap}{\cs27\v\cf2 TAbstractMap}{, }{\cs25\uldb TPArrayBag}{\cs27\v\cf2 TPArrayBag}{, }{\cs25\uldb THashSet}{\cs27\v\cf2 THashSet}{, }{\cs25\uldb TListSet}{\cs27\v\cf2 TListSet}{, 
}{\cs25\uldb TPArraySet}{\cs27\v\cf2 TPArraySet}{, }{\cs25\uldb TArray}{\cs27\v\cf2 TArray}{, }{\cs25\uldb TPArrayList}{\cs27\v\cf2 TPArrayList}{, }{\cs25\uldb THashMap}{\cs27\v\cf2 THashMap}{, }{\cs25\uldb TListMap}{\cs27\v\cf2 TListMap}{, }{\cs25\uldb 
THashIntegerMap}{\cs27\v\cf2 THashIntegerMap}{, }{\cs25\uldb THashStringMap}{\cs27\v\cf2 THashStringMap}{ 
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Hierarchy}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Hierarchy}}}{Hierarchy
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs25\uldb 
\par }{IUnknown
\par }{\cs25\uldb 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Properties_ByObj}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Properties}}}{ICollection properties
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection>main}{        }{\cs17\fs16\uldb Alphabetically}{\cs23\v\fs16\cf2 ICollection_Properties_Alpha}{        }{
\cs22\fs16\ul Legend}{\cs24\v\fs16\ul\cf2 Inspector_Legend}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {In ICollection
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb AsArray}{\cs27\v\cf2 ICollection_AsArray>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb Capacity}{\cs27\v\cf2 ICollection_Capacity>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb Comparator}{\cs27\v\cf2 ICollection_Comparator>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb FixedSize}{\cs27\v\cf2 ICollection_FixedSize>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb IgnoreErrors}{\cs27\v\cf2 ICollection_IgnoreErrors>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb NaturalItemIID}{\cs27\v\cf2 ICollection_NaturalItemIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb NaturalItemsOnly}{\cs27\v\cf2 ICollection_NaturalItemsOnly>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb Size}{\cs27\v\cf2 ICollection_Size>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Properties_Alpha}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Properties}}}{ICollection properties
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection>main}{        }{\cs17\fs16\uldb By object}{\cs23\v\fs16\cf2 ICollection_Properties_ByObj}{        }{\cs22\fs16\ul 
Legend}{\cs24\v\fs16\ul\cf2 Inspector_Legend}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb AsArray}{\cs27\v\cf2 ICollection_AsArray>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb Capacity}{\cs27\v\cf2 ICollection_Capacity>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb Comparator}{\cs27\v\cf2 ICollection_Comparator>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb FixedSize}{\cs27\v\cf2 ICollection_FixedSize>main}{
\par \{bmct Blank.bmp\}\{bmct Blank.bmp\}}{\cs25\uldb IgnoreErrors}{\cs27\v\cf2 ICollection_IgnoreErrors>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb NaturalItemIID}{\cs27\v\cf2 ICollection_NaturalItemIID>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb NaturalItemsOnly}{\cs27\v\cf2 ICollection_NaturalItemsOnly>main}{
\par \{bmct Blank.bmp\}\{bmct ReadOnly.bmp\}}{\cs25\uldb Size}{\cs27\v\cf2 ICollection_Size>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_AsArray}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection AsArray}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ AsArray}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_AsArray}}}{ICollection.AsArray
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Returns array of items.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  AsArray: }{\cs31\f2\uldb TCollectableArray}{\cs30\v\f2\cf2 TCollectableArray}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  Returns new dynamic array of item or nil if collection is empty.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Capacity}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Capacity}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Capacity}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Capacity}}}{ICollection.Capacity
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Allocated space.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  Capacity: Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Amount of allocated space in terms of number of items.  This is much the same as the }{\i TList}{.}{\i Capacity}{
 property, meaning that setting this property advises the collection to allocate enough memory for expected, additional items.  This should improve performance as the collection avoids allocating space each time an item is added.  Setting this property is
 only an advisory and implementations may return a different value than the set value.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Comparator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Comparator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Comparator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Comparator}}}{ICollection.Comparator
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Collection comparator.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  Comparator: }{\cs31\f2\uldb IComparator}{\cs30\v\f2\cf2 IComparator}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Comparator used for checking duplicates, sorting and locating. Default is }{\cs25\uldb TDefaultComparator}{\cs27\v\cf2 TDefaultComparator}{ for non-natural collections and }{
\cs25\uldb TNaturalComparator}{\cs27\v\cf2 TNaturalComparator}{ for natural collections.  Setting to nil, reverts to default comparator for collection.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_FixedSize}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection FixedSize}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ FixedSize}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_FixedSize}}}{ICollection.FixedSize
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Whether collection is fixed size.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  FixedSize: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  Returns true if collection has fixed number of items; additions and removals are not allowed.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_IgnoreErrors}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection IgnoreErrors}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IgnoreErrors}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_IgnoreErrors}}}{ICollection.IgnoreErrors
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Set of failed operations that will not throw an exception.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  IgnoreErrors: }{\cs31\f2\uldb TCollectionErrors}{\cs30\v\f2\cf2 TCollectionError}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {If }{\cs25\uldb TCollectionError}{\cs27\v\cf2 TCollectionError}{ value is included in set, a failed operation of that type will not throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 
ECollectionError}{.  Value }{\i ceOK}{ is ignored.  By default, only }{\i ceDuplicate}{ is set.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_NaturalItemIID}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection NaturalItemIID}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ NaturalItemIID}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_NaturalItemIID}}}{ICollection.NaturalItemIID
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Id of interface that must be implemented by natural items.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  NaturalItemIID: TGUID;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  Identifier of interface (IID) that must be implemented by items to be considered natural by this type of collection.  This is only r
elevent for natural collections.  If equal to constant }{\i EquatableIID}{, the interface is }{\cs25\uldb IEquatable}{\cs27\v\cf2 IEquatable}{; }{\i ComparableIIID}{ for }{\cs25\uldb IComparable}{\cs27\v\cf2 IComparable}{ and }{\i MappableIID}{ for }{
\cs25\uldb IMappable}{\cs27\v\cf2 IMappable}{.  Often, the required interface is }{\i IEquatable}{ for bags and sets, }{\i IComparable}{ for lists and }{\i IMappable}{ for maps, but some implementations require more complex natural items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_NaturalItemsOnly}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection NaturalItemsOnly}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ NaturalItemsOnly}}A
{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_NaturalItemsOnly}}}{ICollection.NaturalItemsOnly
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Collection only accepts natural items.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  NaturalItemsOnly: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  True if collection is a natural collection and can only accept natural items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Size}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Size}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Size}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Size}}}{ICollection.Size
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Number of items in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 property}{\cs28\f2  Size: Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Read only.  Number of items in collection.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Methods_ByObj}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Methods}}}{ICollection methods
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection>main}{        }{\cs17\fs16\uldb Alphabetically}{\cs23\v\fs16\cf2 ICollection_Methods_Alpha}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {In ICollection
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs25\uldb Add(ICollection)}{\cs27\v\cf2 ICollection_Add(ICollection)>main}{
\par }{\cs25\uldb Add(Item)}{\cs27\v\cf2 ICollection_Add(Item)>main}{
\par }{\cs25\uldb Add(Array)}{\cs27\v\cf2 ICollection_Add(Array)>main}{
\par }{\cs25\uldb Clear}{\cs27\v\cf2 ICollection_Clear>main}{
\par }{\cs25\uldb Clone}{\cs27\v\cf2 ICollection_Clone>main}{
\par }{\cs25\uldb Contains(ICollection)}{\cs27\v\cf2 ICollection_Contains(ICollection)>main}{
\par }{\cs25\uldb Contains(Item)}{\cs27\v\cf2 ICollection_Contains(Item)>main}{
\par }{\cs25\uldb Contains(Array)}{\cs27\v\cf2 ICollection_Contains(Array)>main}{
\par }{\cs25\uldb Equals}{\cs27\v\cf2 ICollection_Equals>main}{
\par }{\cs25\uldb Find(FilterComparator)}{\cs27\v\cf2 ICollection_Find(Filter)>main}{
\par }{\cs25\uldb Find(FilterFunc)}{\cs27\v\cf2 ICollection_Find(FilterFunc)>main}{
\par }{\cs25\uldb FindAll(Filter)}{\cs27\v\cf2 ICollection_FindAll(Filter)>main}{
\par }{\cs25\uldb FindAll(FilterFunc)}{\cs27\v\cf2 ICollection_FindAll(FilterFunc)>main}{
\par }{\cs25\uldb GetAsArray}{\cs27\v\cf2 ICollection_GetAsArray>main}{
\par }{\cs25\uldb GetCapacity}{\cs27\v\cf2 ICollection_GetCapacity>main}{
\par }{\cs25\uldb GetComparator}{\cs27\v\cf2 ICollection_GetComparator>main}{
\par }{\cs25\uldb GetDuplicates}{\cs27\v\cf2 ICollection_GetDuplicates>main}{
\par }{\cs25\uldb GetFixedSize}{\cs27\v\cf2 ICollection_GetFixedSize>main}{
\par }{\cs25\uldb GetIgnoreErrors}{\cs27\v\cf2 ICollection_GetIgnoreErrors>main}{
\par }{\cs25\uldb GetInstance}{\cs27\v\cf2 ICollection_GetInstance>main}{
\par }{\cs25\uldb GetIterator}{\cs27\v\cf2 ICollection_GetIterator>main}{
\par }{\cs25\uldb GetIterator(Filter)}{\cs27\v\cf2 ICollection_GetIterator(Filter)>main}{
\par }{\cs25\uldb GetIterator(FilterFunc)}{\cs27\v\cf2 ICollection_GetIterator(FilterFunc)>main}{
\par }{\cs25\uldb GetNaturalItemIID}{\cs27\v\cf2 ICollection_GetNaturalItemIID>main}{
\par }{\cs25\uldb GetNaturalItemsOnly}{\cs27\v\cf2 ICollection_GetNaturalItemsOnly>main}{
\par }{\cs25\uldb GetSize}{\cs27\v\cf2 ICollection_GetSize>main}{
\par }{\cs25\uldb GetType}{\cs27\v\cf2 ICollection_GetType>main}{
\par }{\cs25\uldb IsEmpty}{\cs27\v\cf2 ICollection_IsEmpty>main}{
\par }{\cs25\uldb ItemAllowed}{\cs27\v\cf2 ICollection_ItemAllowed>main}{
\par }{\cs25\uldb ItemCount(Array)}{\cs27\v\cf2 ICollection_ItemCount(Array)>main}{
\par }{\cs25\uldb ItemCount(ICollection)}{\cs27\v\cf2 ICollection_ItemCount(ICollection)>main}{
\par }{\cs25\uldb ItemCount(Item)}{\cs27\v\cf2 ICollection_ItemCount(Item)>main}{
\par }{\cs25\uldb IsNaturalItem}{\cs27\v\cf2 ICollection_IsNaturalItem>main}{
\par }{\cs25\uldb IsNilAllowed}{\cs27\v\cf2 ICollection_IsNilAllowed>main}{
\par }{\cs25\uldb Matching(ICollection)}{\cs27\v\cf2 ICollection_Matching(ICollection)>main}{
\par }{\cs25\uldb Matching(Array)}{\cs27\v\cf2 ICollection_Matching(Array)>main}{
\par }{\cs25\uldb Remove(ICollection)}{\cs27\v\cf2 ICollection_Remove(ICollection)>main}{
\par }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 ICollection_Remove(Item)>main}{
\par }{\cs25\uldb Remove(Array)}{\cs27\v\cf2 ICollection_Remove(Array)>main}{
\par }{\cs25\uldb RemoveAll(ICollection)}{\cs27\v\cf2 ICollection_RemoveAll(ICollection)>main}{
\par }{\cs25\uldb RemoveAll(Item)}{\cs27\v\cf2 ICollection_RemoveAll(Item)>main}{
\par }{\cs25\uldb RemoveAll(Array)}{\cs27\v\cf2 ICollection_RemoveAll(Array)>main}{
\par }{\cs25\uldb Retain(ICollection)}{\cs27\v\cf2 ICollection_Retain(ICollection)>main}{
\par }{\cs25\uldb Retain(Array)}{\cs27\v\cf2 ICollection_Retain(Array)>main}{
\par }{\cs25\uldb SetCapacity}{\cs27\v\cf2 ICollection_SetCapacity>main}{
\par }{\cs25\uldb SetComparator}{\cs27\v\cf2 ICollection_SetComparator>main}{
\par }{\cs25\uldb SetIgnoreErrors}{\cs27\v\cf2 ICollection_SetIgnoreErrors>main}{
\par 
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Derived from IUnknown
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {QueryInterface
\par AddRef
\par Release
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Methods_Alpha}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Methods}}}{ICollection methods
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection>main}{        }{\cs17\fs16\uldb By object}{\cs23\v\fs16\cf2 ICollection_Methods_ByObj}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }{\cs25\uldb Add(ICollection)}{\cs27\v\cf2 ICollection_Add(ICollection)>main}{
\par }{\cs25\uldb Add(Item)}{\cs27\v\cf2 ICollection_Add(Item)>main}{
\par }{\cs25\uldb Add(Array)}{\cs27\v\cf2 ICollection_Add(Array)>main}{
\par AddRef
\par }{\cs25\uldb Clear}{\cs27\v\cf2 ICollection_Clear>main}{
\par }{\cs25\uldb Clone}{\cs27\v\cf2 ICollection_Clone>main}{
\par }{\cs25\uldb Contains(ICollection)}{\cs27\v\cf2 ICollection_Contains(ICollection)>main}{
\par }{\cs25\uldb Contains(Item)}{\cs27\v\cf2 ICollection_Contains(Item)>main}{
\par }{\cs25\uldb Contains(Array)}{\cs27\v\cf2 ICollection_Contains(Array)>main}{
\par }{\cs25\uldb Equals}{\cs27\v\cf2 ICollection_Equals>main}{
\par }{\cs25\uldb Find(Filter)}{\cs27\v\cf2 ICollection_Find(Filter)>main}{
\par }{\cs25\uldb Find(FilterFunc)}{\cs27\v\cf2 ICollection_Find(FilterFunc)>main}{
\par }{\cs25\uldb FindAll(Filter)}{\cs27\v\cf2 ICollection_FindAll(Filter)>main}{
\par }{\cs25\uldb FindAll(FilterFunc)}{\cs27\v\cf2 ICollection_FindAll(FilterFunc)>main}{
\par }{\cs25\uldb GetAsArray}{\cs27\v\cf2 ICollection_GetAsArray>main}{
\par }{\cs25\uldb GetCapacity}{\cs27\v\cf2 ICollection_GetCapacity>main}{
\par }{\cs25\uldb GetComparator}{\cs27\v\cf2 ICollection_GetComparator>main}{
\par }{\cs25\uldb GetDuplicates}{\cs27\v\cf2 ICollection_GetDuplicates>main}{
\par }{\cs25\uldb GetFixedSize}{\cs27\v\cf2 ICollection_GetFixedSize>main}{
\par }{\cs25\uldb GetIgnoreErrors}{\cs27\v\cf2 ICollection_GetIgnoreErrors>main}{
\par }{\cs25\uldb GetInstance}{\cs27\v\cf2 ICollection_GetInstance>main}{
\par }{\cs25\uldb GetIterator}{\cs27\v\cf2 ICollection_GetIterator>main}{
\par }{\cs25\uldb GetIterator(Filter)}{\cs27\v\cf2 ICollection_GetIterator(Filter)>main}{
\par }{\cs25\uldb GetIterator(FilterFunc)}{\cs27\v\cf2 ICollection_GetIterator(FilterFunc)>main}{
\par }{\cs25\uldb GetNaturalItemIID}{\cs27\v\cf2 ICollection_GetNaturalItemIID>main}{
\par }{\cs25\uldb GetNaturalItemsOnly}{\cs27\v\cf2 ICollection_GetNaturalItemsOnly>main}{
\par }{\cs25\uldb GetSize}{\cs27\v\cf2 ICollection_GetSize>main}{
\par }{\cs25\uldb GetType}{\cs27\v\cf2 ICollection_GetType>main}{
\par }{\cs25\uldb IsEmpty}{\cs27\v\cf2 ICollection_IsEmpty>main}{
\par }{\cs25\uldb ItemAllowed}{\cs27\v\cf2 ICollection_ItemAllowed>main}{
\par }{\cs25\uldb ItemCount(Array)}{\cs27\v\cf2 ICollection_ItemCount(Array)>main}{
\par }{\cs25\uldb ItemCount(ICollection)}{\cs27\v\cf2 ICollection_ItemCount(ICollection)>main}{
\par }{\cs25\uldb ItemCount(Item)}{\cs27\v\cf2 ICollection_ItemCount(Item)>main}{
\par }{\cs25\uldb IsNaturalItem}{\cs27\v\cf2 ICollection_IsNaturalItem>main}{
\par }{\cs25\uldb IsNilAllowed}{\cs27\v\cf2 ICollection_IsNilAllowed>main}{
\par }{\cs25\uldb Matching(ICollection)}{\cs27\v\cf2 ICollection_Matching(ICollection)>main}{
\par }{\cs25\uldb Matching(Array)}{\cs27\v\cf2 ICollection_Matching(Array)>main}{
\par QueryInterface
\par Release
\par }{\cs25\uldb Remove(ICollection)}{\cs27\v\cf2 ICollection_Remove(ICollection)>main}{
\par }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 ICollection_Remove(Item)>main}{
\par }{\cs25\uldb Remove(Array)}{\cs27\v\cf2 ICollection_Remove(Array)>main}{
\par }{\cs25\uldb RemoveAll(ICollection)}{\cs27\v\cf2 ICollection_RemoveAll(ICollection)>main}{
\par }{\cs25\uldb RemoveAll(Item)}{\cs27\v\cf2 ICollection_RemoveAll(Item)>main}{
\par }{\cs25\uldb RemoveAll(Array)}{\cs27\v\cf2 ICollection_RemoveAll(Array)>main}{
\par }{\cs25\uldb Retain(ICollection)}{\cs27\v\cf2 ICollection_Retain(ICollection)>main}{
\par }{\cs25\uldb Retain(Array)}{\cs27\v\cf2 ICollection_Retain(Array)>main}{
\par }{\cs25\uldb SetCapacity}{\cs27\v\cf2 ICollection_SetCapacity>main}{
\par }{\cs25\uldb SetComparator}{\cs27\v\cf2 ICollection_SetComparator>main}{
\par }{\cs25\uldb SetIgnoreErrors}{\cs27\v\cf2 ICollection_SetIgnoreErrors>main}{
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Add(Item)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Add(Item)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Add;Add(Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Add}}}{ICollection.Add(Item)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds item to collection, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Add(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Adds item to collection unless:-
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is already in collection and duplicates are not allowed.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Collection is of fixed size.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is non-natural and collection is natural.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {Item is non-
natural and collection is a map.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is nil and collection does not allow nil.
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\par Returns true if successful.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Add(ICollection)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Add(ICollection)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Add;Add(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Add}}}{ICollection.Add(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Adds all allowed, supplied items to collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Add(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{
\cs28\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Adds as many items to collection as possible.  See }{\cs25\uldb Add(Item)}{\cs27\v\cf2 ICollection_Add(Item)}{
 for reasons why items can be rejected.
\par 
\par Returns number of items successfully added.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Add(Array)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Add(Array)}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Add;Add(Array)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Add}}}{ICollection.Add(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Adds all allowed, supplied items to collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Add(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb ICollectable}{
\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Adds as many items to collection as possible.  See }{\cs25\uldb Add(Item)}{\cs27\v\cf2 ICollection_Add(Item)}{ for r
easons why items can be rejected.
\par 
\par Returns number of items successfully added.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Clear}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Clear}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Clear}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Clear}}}{ICollection.Clear
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Clear: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection unless it is fixed size.  Returns true if successful.  Can throw }{\cs25\uldb ECollectionError}{
\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Clone}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Clone}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Clone}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Clone}}}{ICollection.Clone
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Creates duplicate of collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Clone: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns a shallow copy of collection containing current items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Contains(Item)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Contains(Item)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Contains;Contains(Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Contains}}}{ICollection.Contains(Item)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether item is found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Contains(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if item is found in collection according to the collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Contains(ICollection)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{
 ICollection Contains(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Contains;Contains(ICollection)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Contains}}}{ICollection.Contains(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether all supplied items are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }{\cs29\b\f2 function}{\cs28\f2  Contains(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ): Boolean;
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if all supplied items are found in collection according to the collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Contains(Array)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Contains(Array)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Contains; Contains(Array)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Contains}}}{ICollection. Contains(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether all supplied items are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Contains(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb 
ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): Boolean;
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if all supplied items are found in collection according to the collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Equals}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Equals}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Equals}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Equals}}}{ICollection.Equals
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether collections are the same type and contain same items.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }{\cs29\b\f2 function}{\cs28\f2  Equals(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ): Boolean;
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if self and parameter are the same type and contain the same items.  As equals functions must be commutative i.e. }{\cs28\f2 
Coll1.Equals(Coll2)}{ and }{\cs28\f2 Coll2.Equals(Coll1)}{ must always be the same, the comparators must also be equal.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Find(Filter)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Find(Filter)}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Find;Find(Filter)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Find}}}{ICollection.Find(Filter)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection item accepted by filter.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Find(}{\cs29\b\f2 const}{\cs28\f2  Filter: }{\cs31\f2\uldb IFilter}{\cs30\v\f2\cf2 IFilter}{\cs28\f2 ): }{
\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns first item in collection accepted by }{\i Filter}{, otherwise nil.  I
f multiple items match this criteria, the selected item is arbitrary as collections (except for lists) have no order; for lists, the selected item is the first in the list order.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Find(FilterFunc)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Find(FilterFunc)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Find;Find(FilterFunc)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Find}}}{ICollection.Find(FilterFunc)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection item accepted by filter function.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Find(FilterFunc: }{\cs31\f2\uldb TCollectionFilterFunc}{\cs30\v\f2\cf2 TCollectionFilterFunc}{\cs28\f2 ): }{
\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns first item in collection accepted by }{\i FilterFunc}{
, otherwise nil.  If multiple items match this criteria, the selected item is arbitrary as collections (except for lists) have no order; for lists, the selected item is the first in the list order.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_FindAll(Filter)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection FindAll(Filter)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ FindAll;FindAll(Filter)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_FindAll}}}{ICollection.FindAll(Filter)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns all collection items accepted by filter.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Find(}{\cs29\b\f2 const}{\cs28\f2  Filter: }{\cs31\f2\uldb IFilter}{\cs30\v\f2\cf2 IFilter}{\cs28\f2 ): }{
\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns all items in collection accepted by }{\i Filter}{, otherwise an empty collection.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_FindAll(FilterFunc)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection FindAll(FilterFunc)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ FindAll;FindAll(FilterFunc)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_FindAll}}}{ICollection.FindAll(FilterFunc)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns all collection items accepted by filter function.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Find(FilterFunc: }{\cs31\f2\uldb TCollectionFilterFunc}{\cs30\v\f2\cf2 TCollectionFilterFunc}{\cs28\f2 ): }{
\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns all items in collection accepted by }{\i FilterFunc}{, otherwise an empty collection.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetAsArray}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetAsArray}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetAsArray}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetAsArray}}}{ICollection.GetAsArray
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection items as }{\cs25\uldb ICollectable}{\cs27\v\cf2 ICollectable}{ array.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetAsArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns all items in collection as a dynamic array of }{\cs25\uldb ICollectable}{\cs27\v\cf2 ICollectable}{ or nil if collection is empty.

\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetCapacity}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetCapacity}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetCapacity}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetCapacity}}}{ICollection.GetCapacity
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns allocated space.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetCapacity: Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns amount of memory allocated to store items, measured as numbers of items.  This will always be equal or greater than }{\i Size}{.

\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetComparator}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetComparator}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetComparator}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetComparator}}}{ICollection.GetComparator
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns comparator used by collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetComparator: }{\cs31\f2\uldb IComparator}{\cs30\v\f2\cf2 IComparator}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns comparator used by collection.  By default, returns an instance of TDefaultComparator for non-natural collections and 
TNaturalComparator for natural collections.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetDuplicates}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetDuplicates}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetDuplicates}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetDuplicates}}}{ICollection.GetDuplicates
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether duplicates are allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetDuplicates: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
Returns true if duplicate items are allowed i.e. items that are equal according to collection comparator.  True for all collection types but false for sets.and uses the }{\i Duplicate}{ property for lists.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetFixedSize}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetFixedSize}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetFixedSize}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetFixedSize}}}{ICollection.GetFixedSize
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection cannot change size.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetFixedSize: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if the number of items in the collection cannot change.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetIgnoreErrors}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetIgnoreErrors}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetIgnoreErrors}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec 
}\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetIgnoreErrors}}}{ICollection.GetIgnoreErrors
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Set of failed operations that will not throw an exception.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetIgnoreErrors: }{\cs31\f2\uldb TCollectionErrors}{\cs30\v\f2\cf2 TCollectionError}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {If }{\cs25\uldb TCollectionError}{\cs27\v\cf2 TCollectionError}{ value is included in set, a failed operation of that type will not throw }
{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.  Value }{\i ceOK}{ is ignored.  By default, only }{\i ceDuplicate}{ is set.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetInstance}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetInstance}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetInstance}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetInstance}}}{ICollection.GetInstance
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection as object reference.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetInstance: TObject;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection as object reference.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetIterator}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetIterator}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetIterator}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetIterator}}}{ICollection.GetIterator
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns iterator.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetIterator: }{\cs31\f2\uldb IIterator}{\cs30\v\f2\cf2 IIterator}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every item in sequence.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetIterator(Filter)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetIterator(Filter)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetIterator;GetIterator(Filter)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetIterator}}}{ICollection.GetIterator(Filter)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns filtered iterator.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetIterator(}{\cs29\b\f2 const}{\cs28\f2  Filter: }{\cs31\f2\uldb IFilter}{\cs30\v\f2\cf2 IFilter}{\cs28\f2 
): }{\cs31\f2\uldb IIterator}{\cs30\v\f2\cf2 IIterator}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every item in sequence accepted by }{\i Filter}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetIterator(FilterFunc)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ 
ICollection GetIterator(FilterFunc)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetIterator;GetIterator(FilterFunc)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetIterator}}}{ICollection.GetIterator(FilterFunc)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns filtered iterator.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetIterator(FilterFunc: }{\cs31\f2\uldb TCollectionFilterFunc}{\cs30\v\f2\cf2 TCollectionFilterFunc}{
\cs28\f2 ): }{\cs31\f2\uldb IIterator}{\cs30\v\f2\cf2 IIterator}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns iterator that can access every item in sequence accepted by }{\i FilterFunc}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetNaturalItemIID}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetNaturalItemIID}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetNaturalItemIID}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetNaturalItemIID}}}{ICollection.GetNaturalItemIID
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Identifies natural interface.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetNaturalItemIID: TGUID;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns identifier of interface (IID) that must be implemented by items to be considered natural by this type of collection.
  This is only relevent for natural collections.  If equal to constant }{\i EquatableIID}{, the interface is }{\cs25\uldb IEquatable}{\cs27\v\cf2 IEquatable}{; }{\i ComparableIIID}{ for }{\cs25\uldb IComparable}{\cs27\v\cf2 IComparable}{
 and MappableIID for }{\cs25\uldb IMappable}{\cs27\v\cf2 IMappable}{.  Often, the required interface is }{\i IEquatable}{ for bags and sets, }{\i IComparable}{ for lists and }{\i IMappable}{
 for maps, but some implementations require more complex natural items.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetNaturalItemsOnly}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetNaturalItemsOnly}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetNaturalItemsOnly}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetNaturalItemsOnly}}}{ICollection.GetNaturalItemsOnly
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether collection only accepts natural items.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetNaturalItemsOnly: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection is a natural collection and can only accept natural items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetSize}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetSize}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetSize}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetSize}}}{ICollection.GetSize
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns number of items in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetSize: Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns number of items in collection.  This can include duplicates.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_GetType}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection GetType}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ GetType}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_GetType}}}{ICollection.GetType
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns type of collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  GetType: }{\cs31\f2\uldb TCollectionType}{\cs30\v\f2\cf2 TCollectionType}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns basic type of collection i.e. bag, set, list or map.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_IsEmpty}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection IsEmpty}}K{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IsEmpty}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_IsEmpty}}}{ICollection.IsEmpty
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether collection is empty.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  IsEmpty: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection contains no items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_IsNaturalItem}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection IsNaturalItem}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IsNaturalItem}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_IsNaturalItem}}}{ICollection.IsNaturalItem
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether item is natural for this collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  IsNaturalItem(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}
{\cs28\f2 ): Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
Returns true if item implements interface required to be a natural item for this collection. Often, the required interface is IEquatable for bags and sets, IComparable for lists and
 IMappable for maps, but some implementations require more complex natural items.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_IsNilAllowed}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection IsNilAllowed}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ IsNilAllowed}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_IsNilAllowed}}}{ICollection.IsNilAllowed
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether items can be nil for this collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  IsNilAllowed: Boolean;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns true if collection can accept nil as an item.  This is true for bags, lists and maps but not sets.  Keys can never be nil.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_ItemAllowed}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection ItemAllowed}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ItemAllowed}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_ItemAllowed}}}{ICollection.ItemAllowed
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Whether item can be in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  ItemAllowed(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): }{\cs31\f2\uldb TCollectionError}{\cs30\v\f2\cf2 TCollectionError}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns }{\i ceNotNaturalItem}{ if item is non-natural but collection is natural, }{\i ceNilNotAllowed}{ if }{\i Item}{
 is nil and collection does not allow nil, otherwise }{\i ceOK}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_ItemCount(Array)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection ItemCount(Array)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ItemCount;ItemCount(Array)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_ItemCount}}}{ICollection.ItemCount(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Counts instances of item.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  ItemCount(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array}{\cs28\f2  }{\cs29\b\f2 of}{\cs28\f2  
}{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
Returns total number of times each item appears in self.  Note that it is not a requirement of the function to check if an item has already being counted, so duplicate items in the parameter array will affect results.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_ItemCount(ICollection)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{
 ICollection ItemCount(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ItemCount;ItemCount(ICollection)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_ItemCount}}}{ICollection.ItemCount(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Counts instances of item.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  ItemCount(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}
{\cs28\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
Returns total number of times each item appears in self.  Note that it is not a requirement of the function to check if an item has already being counted, so duplicate items in the parameter collection will affect results.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_ItemCount(Item)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection ItemCount(Item)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ ItemCount;ItemCount(Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_ItemCount}}}{ICollection.ItemCount(Item)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Counts instances of item.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  ItemCount(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): Integer;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns number of times }{\i Item}{ appears in self.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Matching(ICollection)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{
 ICollection Matching(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Matching;Matching(ICollection)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Matching}}}{ICollection.Matching(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Finds which supplied items are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Matching(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{
\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection of supplied items that can be found in collection, according to collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Matching(Array)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Matching(Array)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Matching;Matching(Array)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Matching}}}{ICollection.Matching(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Finds which supplied items are found in collection.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Matching(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb ICollecta
ble}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Returns collection of supplied items that can be found in collection, according to collection comparator.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Remove(Item)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Remove(Item)}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Remove;Remove(Item)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Remove}}}{ICollection.Remove(Item)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes single item from collection, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Remove(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
Removes first item found that is equal to parameter according to collection comparator.  If duplicates exist, the actual object removed is arbitrary.  This can fail if:-
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Collection is of fixed size.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is non-natural and collection is natural.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {I
tem is nil and collection does not allow nil
\par }\pard \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\par Returns item that was removed.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Remove(ICollection)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Remove(ICollection)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Remove;Remove(ICollection)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Remove}}}{ICollection.Remove(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all supplied items from collection, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Remove(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{
\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {For each item in supplied collection, removes fi
rst item found that is equal according to collection comparator. If duplicates exist, the actual object removed is arbitrary.  See }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 ICollection_Remove(Item)}{ for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Remove(Array)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Remove(Array)}}K{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Remove;Remove(Array)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Remove}}}{ICollection.Remove(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection found in parameter, if allowed..
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Remove(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb 
ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {For each item in supplied array, removes first item found that is equal according to collection comparator. If duplicates exist, the actual
 object removed is arbitrary.  See }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 ICollection_Remove(Item)}{ for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright 
\f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_RemoveAll(Item)}}${\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection RemoveAll(Item)}}K
{\footnote \pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ RemoveAll;RemoveAll(Item)}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_RemoveAll}}}{ICollection.RemoveAll(Item)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all instances of item from collection, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  RemoveAll(}{\cs29\b\f2 const}{\cs28\f2  Item: }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright \f1\fs20\lang2057\cgrid {Removes all items found that are equal to parameter according to collection comparator.  This can fail if:-
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Collection is of fixed size.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is non-natural and collection is natural.
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1080\nowidctlpar\widctlpar\jclisttab\tx1080{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {
Item is nil and collection does not allow nil.
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par Returns all item that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_RemoveAll(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Remove(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{
 RemoveAll;RemoveAll(ICollection)}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_RemoveAll}}}{ICollection.RemoveAll(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all supplied items from collection, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  RemoveAll(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ): }{\cs31\f2\uldb ICollection}{
\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {For each item in supplied collection, removes all items found that are equal according to collection comparator.  See }{\cs25\uldb RemoveAll(Item)}{\cs27\v\cf2 
ICollection_RemoveAll(Item)}{ for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_RemoveAll(Array)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection RemoveAll(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ RemoveAll;RemoveAll(Array)}}A
{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_RemoveAll}}}{ICollection.RemoveAll(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection found in parameter, if allowed..
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  RemoveAll(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{
\cs28\f2 ): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {For each item in supplied array, removes all items found that are equal according to collection comparator.  See }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 ICollection_Remove(Item)}{
 for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Retain(ICollection)}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Retain(ICollection)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Retain;Retain(ICollection)
}}A{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Retain}}}{ICollection.Retain(ICollection)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Keeps items in collection that are found in parameter, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Retain(}{\cs29\b\f2 const}{\cs28\f2  Collection: }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ): }{\cs31\f2\uldb ICollection}{
\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection except those that match any item in supplied collection, according to collection comparator.  See }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 
ICollection_Remove(Item)}{ for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_Retain(Array)}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection Retain(Array)}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ Retain;Retain(Array)}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_Retain}}}{ICollection.Retain(Array)
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Keeps items in collection that are found in parameter, if allowed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 function}{\cs28\f2  Retain(}{\cs29\b\f2 const}{\cs28\f2  ItemArray: }{\cs29\b\f2 array of}{\cs28\f2  }{\cs31\f2\uldb ICollectable}{\cs30\v\f2\cf2 ICollectable}{\cs28\f2 
): }{\cs31\f2\uldb ICollection}{\cs30\v\f2\cf2 ICollection}{\cs28\f2 ;
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Removes all items from collection except those that match any item in supplied array, according to collection comparator.  See }{\cs25\uldb Remove(Item)}{\cs27\v\cf2 
ICollection_Remove(Item)}{ for reasons why items can be rejected.
\par 
\par Returns items that were removed as collection.  Can throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 ECollectionError}{.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_SetCapacity}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection SetCapacity}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ SetCapacity}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_SetCapacity}}}{ICollection.SetCapacity
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets allocated memory.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 procedure}{\cs28\f2  SetCapacity(Value: Integer);
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets amount of allocated space in terms of number of items.  This is much the same as setting the }{\i TList}{.}{\i Capacity}{
 property, meaning that setting this property advises the collection to allocate enough memory for expected, additional items.  This should impr
ove performance as the collection avoids allocating space each time an item is added.  Setting this property is only an advisory and implementations may return a different value than the set value.
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_SetComparator}}${\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection SetComparator}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ SetComparator}}A{\footnote \pard\plain 
\s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_SetComparator}}}{ICollection.SetComparator
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets collection comparator.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 procedure}{\cs28\f2  SetComparator(}{\cs29\b\f2 const}{\cs28\f2  Comparator: }{\cs31\f2\uldb IComparator}{\cs30\v\f2\cf2 IComparator}{\cs28\f2 );
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets collection comparator.  If parameter is nil, comparator reverts to default comparator for collection(}{\cs25\uldb TDefaultComparator}{\cs27\v\cf2 TDefaultComparator}{
 for non-natural collections and }{\cs25\uldb TNaturalComparator}{\cs27\v\cf2 TNaturalComparator}{ for natural collections).
\par 
\par }\pard\plain \s16\keepn\nowidctlpar\widctlpar\adjustright \b\f1\lang2057\cgrid {\page }{\cs19\super #{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super #}{ ICollection_SetIgnoreErrors}}${\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super $}{ ICollection SetIgnoreErrors}}K{\footnote \pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super K}{ SetIgnoreErrors}}A{\footnote 
\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs19\super A}{ ICollection_SetIgnoreErrors}}}{ICollection.SetIgnoreErrors
\par }\pard\plain \s26\keepn\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs17\fs16\uldb ICollection}{\cs23\v\fs16\cf2 ICollection}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {Sets which failed operations that will not throw an exception.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {\cs29\b\f2 procedure}{\cs28\f2  SetIgnoreErrors(Value: }{\cs31\f2\uldb TCollectionErrors}{\cs30\v\f2\cf2 TCollectionError}{\cs28\f2 );
\par }{
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \b\f1\fs20\lang2057\cgrid {Description
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \f1\fs20\lang2057\cgrid {If }{\cs25\uldb TCollectionError}{\cs27\v\cf2 TCollectionError}{ value is included in set, a failed operation of that type will not throw }{\cs25\uldb ECollectionError}{\cs27\v\cf2 
ECollectionError}{.  Value }{\i ceOK}{ is ignored.  By default, only }{\i ceDuplicate}{ is set.
\par 
\par }}